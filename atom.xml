<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zhou's Blog]]></title>
  <link href="http://yoyzhou.github.io/atom.xml" rel="self"/>
  <link href="http://yoyzhou.github.io/"/>
  <updated>2014-11-02T01:05:30-07:00</updated>
  <id>http://yoyzhou.github.io/</id>
  <author>
    <name><![CDATA[yoyzhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Hadoop上运行Mahout KMeans聚类分析]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/06/04/mahout-clustering-with-hadoop/"/>
    <updated>2013-06-04T20:18:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/06/04/mahout-clustering-with-hadoop</id>
    <content type="html"><![CDATA[<p>上一篇文章<a href="http://yoyzhou.github.io/blog/2013/05/26/clustering-with-mahout/">“Mahout与聚类分析”</a>介绍了如何使用Mahout进行聚类分析的步骤，并且结合实例使用K-Means对微博名人共同关注数据进行了共被关注聚类分析。Mahout运行有本地运行和Hadoop运行两种模式，本地运行是指在用户本地的单机模式下运行，就像运行其他普通的程序一样，但是这样这样就不能最大限度的发挥出Mahout的优势，在本文中我们介绍如何让我们的Mahout聚类分析程序在Hahoop集群上运行（在实际操作中笔者使用的伪分布Hadoop，而不是真正的Hadoop集群）。</p>

<h4 id="mahout">配置Mahout运行环境</h4>

<p>Mahout运行配置可以在<code>$MAHOUT_HOME/bin/mahout</code>里面进行设置，实际上<code>$MAHOUT_HOME/bin/mahout</code>就是Mahout在命令行的启动脚本，这一点与Hadoop相似，但也又不同，Hadoop在$HADOOP_HOME\conf下面还提供了专门的hadoop-env.sh文件进行相关环境变量的配置，而Mahout在conf目录下没有提供这样的文件。</p>

<h5 id="mahoutlocalhadoopconfdir">MAHOUT_LOCAL与HADOOP_CONF_DIR</h5>

<p>以上的连个参数是控制Mahout是在本地运行还是在Hadoop上运行的关键。</p>

<p><code>$MAHOUT_HOME/bin/mahout</code>文件指出，<strong>只要设置<code>MAHOUT_LOCAL</code>的值为一个非空（not empty string）值，则不管用户有没有设置HADOOP_CONF_DIR和HADOOP_HOME这两个参数，Mahout都以本地模式运行</strong>；换句话说，如果要想Mahout运行在Hadoop上，则MAHOUT_LOCAL必须为空。 </p>

<p><code>HADOOP_CONF_DIR</code>参数指定Mahout运行Hadoop模式时使用的Hadoop配置信息，这个文件目录一般指向的是$HADOOP_HOME目录下的conf目录。</p>

<p>除此之外，我们还应该设置<code>JAVA_HOME</code>或者<code>MAHOUT_JAVA_HOME</code>变量，以及必须将Hadoop的执行文件加入到PATH中。</p>

<p>综上所述：</p>

<p>1. 添加<code>JAVA_HOME</code>变量，可以在直接设置在<code>$MAHOUT_HOME/bin/mahout</code>中，也可以在user/bash profile里面设置(如<code>./bashrc</code>)</p>

<p>2. 设置MAHOUT_HOME并添加Hadoop的执行文件到PATH中</p>

<p>两个步骤在<code>~/.bashrc</code>的设置如下：</p>

<pre><code>export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-i386
#export HADOOP_HOME=/home/yoyzhou/workspace/hadoop-1.1.2
export MAHOUT_HOME=/home/yoyzhou/workspace/mahout-0.7
export PATH=$PATH:/home/yoyzhou/workspace/hadoop-1.1.2/bin:$MAHOUT_HOME/bin
</code></pre>

<p>编辑完<code>~/.bashrc</code>,重启Terminal即可生效。</p>

<p>3. 编辑<code>$MAHOUT_HOME/bin/mahout</code>，将<code>HADOOP_CONF_DIR</code>设置为<code>$HADOOP_HOME\conf</code></p>

<pre><code>HADOOP_CONF_DIR=/home/yoyzhou/workspace/hadoop-1.1.2/conf
</code></pre>

<p>读者可以将相关的Hadoop和Mahout主目录修改自己系统上面的目录地址，设置好之后重启Terminal，在命令行输入mahout，如果你看到如下的信息，就说明Mahout的Hadoop运行模式已经配置好了。</p>

<pre><code>MAHOUT_LOCAL is not set; adding HADOOP_CONF_DIR to classpath. 
Running on hadoop...
</code></pre>

<p>要想使用本地模式运行，只需在<code>$MAHOUT_HOME/bin/mahout</code>添加一条设置<code>MAHOUT_LOCAL</code>为非空的语句即可。</p>

<h4 id="mahout-1">Mahout命令行</h4>

<p>Mahout为相关的数据挖掘算法提供了相应的命令行入口，同时提供了一些数据分析处理的用到的工具集。这些命令可以通过在终端输入<code>mahout</code>获得。以下显示了输入<code>mahout</code>的部分信息：</p>

<pre><code>....
Valid program names are:
  arff.vector: : Generate Vectors from an ARFF file or directory
  baumwelch: : Baum-Welch algorithm for unsupervised HMM training
  canopy: : Canopy clustering
  cat: : Print a file or resource as the logistic regression models would see it
  cleansvd: : Cleanup and verification of SVD output
  clusterdump: : Dump cluster output to text
  ....
  fkmeans: : Fuzzy K-means clustering
  fpg: : Frequent Pattern Growth
  hmmpredict: : Generate random sequence of observations by given HMM
  itemsimilarity: : Compute the item-item-similarities for item-based collaborative filtering
  kmeans: : K-means clustering
....
</code></pre>

<h4 id="mahout-kmeans">Mahout kmeans</h4>

<p>在上一篇<a href="http://yoyzhou.github.io/blog/2013/05/26/clustering-with-mahout/">文章</a>，我们通过调用KMeansDriver.run()方法从Mahout程序中直接启动KMeans算法，这种方式对于在本地调试程序非常有用，但是在真实项目中，无论是使用Hadoop模式运行，还是本地运行，从命令行运行Mahout的相关算法更加合适，这样的好处是我们只需要给Mahout提供符合相应算法要求的输入数据，即可以利用Mahout分布式处理的优势。比如在本例中，使用kmeans算法，只需要事先将数据处理成Mahout kmeans算法要求的输入数据，然后在命令行调用<code>mahout kmeans [options]</code>即可。</p>

<p>在命令行输入不带任何参数的<code>mahout kmeans</code>，Mahout将为你列出在命令行使用kmeans算法的使用方法。</p>

<pre><code>Usage:                                                                          
 [--input &lt;input&gt; --output &lt;output&gt; --distanceMeasure &lt;distanceMeasure&gt;         
--clusters &lt;clusters&gt; --numClusters &lt;k&gt; --convergenceDelta &lt;convergenceDelta&gt;   
--maxIter &lt;maxIter&gt; --overwrite --clustering --method &lt;method&gt;                  
--outlierThreshold &lt;outlierThreshold&gt; --help --tempDir &lt;tempDir&gt; --startPhase   
&lt;startPhase&gt; --endPhase &lt;endPhase&gt;]                                             
--clusters (-c) clusters    The input centroids, as Vectors.  Must be a         
	                        SequenceFile of Writable, Cluster/Canopy.  If k is  
	                        also specified, then a random set of vectors will   
	                        be selected and written out to this path first 
</code></pre>

<p>相关的参数我们已经在上篇<a href="http://yoyzhou.github.io/blog/2013/05/26/clustering-with-mahout/">文章</a>中提到过。</p>

<p>具体的步骤如下：</p>

<pre><code>1. 将数据处理为Mahout向量（Vector）的形式
2. 将Mahout向量转化为Hadoop SequenceFile
3. 创建K个初始质心\[可选\]
4. 将Mahout向量的SequenceFile复制到HDFS上
5. 运行`mahout kmeans [options]`
</code></pre>

<p>下面的命令显示使用CosineDistanceMeasure对data/vectors目录下Mahout向量数据进行kmeans聚类分析，输出结果保存在output目录下。</p>

<pre><code>mahout kmeans -i data/vectors -o output -c data/clusters \
-dm org.apache.mahout.common.distance.CosineDistanceMeasure \
-x 10 -ow -cd 0.001 -cl
</code></pre>

<p>更加详细的命令行参数可以在Mahout wiki <a href="https://cwiki.apache.org/MAHOUT/k-means-commandline.html">k-means-commandline</a>上查找到。</p>

<h4 id="section">总结</h4>

<p>本文首先介绍了如何配置Mahout的Hadoop的运行环境，然后介绍如何使用mahout kmeans命令行将聚类分析运行在Hadoop上。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mahout与聚类分析]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/05/26/clustering-with-mahout/"/>
    <updated>2013-05-26T21:53:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/05/26/clustering-with-mahout</id>
    <content type="html"><![CDATA[<p>本文简要的介绍了Mahout以及聚类分析，并结合实例说明了如何使用Mahout的K-Means算法进行聚类分析。</p>

<h4 id="mahout">Mahout</h4>

<p>Mahout是Apache下的开源机器学习软件包，目前实现的机器学习算法主要包含有<strong>协同过滤/推荐引擎</strong>，<strong>聚类</strong>和<strong>分类</strong>三个部分。Mahout从设计开始就旨在建立可扩展的机器学习软件包，用于处理大数据机器学习的问题，当你正在研究的数据量大到不能在一台机器上运行时，就可以选择使用Mahout，让你的数据在Hadoop集群的进行分析。Mahout某些部分的实现直接创建在Hadoop之上，这就使得其具有进行大数据处理的能力，也是Mahout最大的优势所在。相比较于<a href="http://www.cs.waikato.ac.nz/ml/weka/">Weka</a>，<a href="https://rapid-i.com/content/view/181/190/">RapidMiner</a>等图形化的机器学习软件，Mahout只提供机器学习的程序包（library），不提供用户图形界面，并且Mahout并不包含所有的机器学习算法实现，这一点可以算得上是她的一个劣势，但前面提到过Mahout并不是“又一个机器学习软件”，而是要成为一个“可扩展的用于处理大数据的机器学习软件”，但是我相信会有越来越多的机器学习算法会在Mahout上面实现。</p>

<h4 id="section">聚类分析</h4>

<p>物以类聚，人以群分。顾名思义，聚类分析就是将不同的对象分为不同的组或簇，它与我们日常生活所理解的类的概念是相一致的。聚类分析能够帮助我们很好地了解对象之间的类与结构，聚类分析也能够帮助我们将个别对象指派到相应的类。</p>

<blockquote>
  <p>聚类分析仅根据在数据中发现的描述对象及其关系的信息，将数据对象分组。其目标是，组内的对象相互之间是相似的（相关的），而不同组之间的对象是不同的（不相关的）。组内的相似性（同质性）越大，组间差别越大，聚类就越好。<br />《数据挖掘导论》 Pang-Ning Tan等</p>
</blockquote>

<p>常见的聚类分析有K-Means聚类和层次聚类两种。此外还有基于密度的、基于图的以及基于模型的聚类分析方法。</p>

<p>从上面的定义中可以看出，聚类的分析的关键之一在于相似性的度量，常用的相似性有基于距离的相似度，余玄相似度，Jaccard相似度以及Pearson相关系数等。</p>

<h4 id="mahout-1">Mahout聚类分析</h4>

<p>Mahout的聚类分析提供了K-Means聚类、Fuzzy K-Means聚类和基于模型的聚类等方法。下面我们以K-Means聚类来说明如何使用Mahout进行聚类分析。</p>

<h5 id="section-1">1. 数据准备</h5>

<p>在进行数据分析时，第一步必然是准备分析数据。根据研究或者项目的要求收集数据，并且对数据进行必要的预处理。比如我下面我们要提到的微博用户共被关注分析中，首先我们要收集微博用户的关注信息，然后从关注信息中提取出用户共被关注的数据，也就是进行数据预处理。最终我们需要的数据可能就像下面的格式这样直白明确：“用户1,用户2,共被关注次数”。如果你是要进行文档的聚类分析，那么首先需要的获得的是文档的TF-IDF向量（文档-词向量）。</p>

<h5 id="mahoutvector">2. 将数据转换成Mahout中的Vector</h5>

<p>Mahout要求每一个输入数据都应该是一个Vector，并且以Hadoop的SequenceFile类型存储。简单来说N维<strong>Vector</strong>就是一条N维<strong>记录</strong>，其中<strong>维</strong>就是记录的<strong>属性</strong>。比如一个TF-IDF向量就是一个<strong>文档</strong>记录，里面的属性就是<strong>词</strong>，有n个词就有n个维。有时候属性也叫<strong>特征</strong>。</p>

<p>在准备好Vectors之后，需要将这些记录写入到Hadoop Sequence文件中。下面的代码片段演示和如何创建Mahout Vector和将记录写成Sequence文件。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//...create Vector</span>
</span><span class="line"><span class="c1">//NamedVector is a Vector Wrapper class which owns a name for each vector, very convenient class </span>
</span><span class="line"><span class="n">NamedVector</span> <span class="n">vec</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NamedVector</span><span class="o">(</span><span class="k">new</span> <span class="nf">RandomAccessSparseVector</span><span class="o">(</span><span class="n">cflist</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">),</span> <span class="n">account</span><span class="o">);</span>
</span><span class="line"><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">CoFollowedNode</span><span class="o">&gt;</span> <span class="n">nodeItr</span> <span class="o">=</span> <span class="n">cflist</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class="line"><span class="k">while</span><span class="o">(</span><span class="n">nodeItr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
</span><span class="line">	<span class="n">CoFollowedNode</span> <span class="n">cfnode</span><span class="o">=</span> <span class="n">nodeItr</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class="line">	<span class="c1">//set vector&#39;s n-dimension with co-followed number</span>
</span><span class="line">	<span class="n">vec</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">cfnode</span><span class="o">.</span><span class="na">getDemension</span><span class="o">(),</span> <span class="n">cfnode</span><span class="o">.</span><span class="na">getCoFollowedNum</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">  * Write Vectors to Hadoop sequence file, it&#39;s required per Mahout implementation that Vectors passed</span>
</span><span class="line"><span class="cm">  * into Mahout clusterings must be in Hadoop sequence file. </span>
</span><span class="line"><span class="cm">  * </span>
</span><span class="line"><span class="cm">  **/</span>
</span><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">writeVectorsToSeqFile</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">NamedVector</span><span class="o">&gt;</span> <span class="n">vectors</span><span class="o">,</span> <span class="n">String</span> <span class="n">filename</span><span class="o">,</span>
</span><span class="line">		<span class="n">FileSystem</span> <span class="n">fs</span><span class="o">,</span> <span class="n">Configuration</span> <span class="n">conf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">		
</span><span class="line">	<span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="n">filename</span><span class="o">);</span>
</span><span class="line">	<span class="n">SequenceFile</span><span class="o">.</span><span class="na">Writer</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SequenceFile</span><span class="o">.</span><span class="na">Writer</span><span class="o">(</span><span class="n">fs</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span>
</span><span class="line">				<span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">VectorWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		
</span><span class="line">	<span class="n">VectorWritable</span> <span class="n">vec</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">VectorWritable</span><span class="o">();</span>
</span><span class="line">		
</span><span class="line">	<span class="c1">//write vectors to file, the key is the account id, value is the co-followed vector of the key</span>
</span><span class="line">	<span class="k">for</span> <span class="o">(</span><span class="n">NamedVector</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">vectors</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="n">vec</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class="line">		<span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="nf">Text</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getName</span><span class="o">()),</span> <span class="n">vec</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	<span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">		
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="mahoutk-means">3. 使用Mahout中的K-Means进行聚类</h5>

<p>在介绍如何使用Mahout的K-Means之前，先复习一下基本的K-Means算法，如下所述：</p>

<pre><code>**基本的K-Means算法**

1, 选择K个点作为初始质心

2, repeat:

3,	将每个点指派到最近的质心，形成K个簇

4,	重新计算每个簇的质心

5, until 质心不再发生改变
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//write initial clusters point, in this case 5 points/vectors</span>
</span><span class="line"><span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="s">&quot;data/clusters/part-00000&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">SequenceFile</span><span class="o">.</span><span class="na">Writer</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SequenceFile</span><span class="o">.</span><span class="na">Writer</span><span class="o">(</span><span class="n">fs</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span>
</span><span class="line">		<span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">Kluster</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">	<span class="n">NamedVector</span> <span class="n">nVec</span> <span class="o">=</span>  <span class="n">vectors</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">			
</span><span class="line">	<span class="n">Kluster</span> <span class="n">cluster</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Kluster</span><span class="o">(</span><span class="n">nVec</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="k">new</span> <span class="nf">CosineDistanceMeasure</span><span class="o">());</span>
</span><span class="line">	<span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="nf">Text</span><span class="o">(</span><span class="n">cluster</span><span class="o">.</span><span class="na">getIdentifier</span><span class="o">()),</span> <span class="n">cluster</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">		
</span><span class="line"><span class="c1">//here runs the k-means clustering in mapreduce mode, set runSequential to false</span>
</span><span class="line"><span class="n">KMeansDriver</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="s">&quot;data/vectors&quot;</span><span class="o">),</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span>
</span><span class="line">		<span class="s">&quot;data/clusters&quot;</span><span class="o">),</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="s">&quot;output&quot;</span><span class="o">),</span>
</span><span class="line">		<span class="k">new</span> <span class="nf">CosineDistanceMeasure</span><span class="o">(),</span> <span class="mf">0.001</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的代码显示了Mahout中运行K-Means算法的用法，首先提供K个初始质心，如果用户没有提供初始质心，Mahout将根据用户给出的K随机的选择K个点作为初始质心。</p>

<p>KMeansDriver提供了运行K-Means算法的入口，其中的参数包含：</p>

<pre><code>/**
   	* Iterate over the input vectors to produce clusters and, if requested, use the results of the final iteration to
   	* cluster the input vectors.
   	* 
   	* @param input
   	*          the directory pathname for input points
   	* @param clustersIn
   	*          the directory pathname for initial &amp; computed clusters
   	* @param output
   	*          the directory pathname for output points
   	* @param measure
   	*          the DistanceMeasure to use
   	* @param convergenceDelta
   	*          the convergence delta value
   	* @param maxIterations
   	*          the maximum number of iterations
   	* @param runClustering
   	*          true if points are to be clustered after iterations are completed
   	* @param clusterClassificationThreshold
   	*          Is a clustering strictness / outlier removal parameter. Its value should be between 0 and 1. Vectors
   	*          having pdf below this value will not be clustered.
   	* @param runSequential
   	*          if true execute sequential algorithm, else run algorithm in mapreduce mode 
   	*/
</code></pre>

<h4 id="section-2">总结</h4>

<p>本文简要的介绍了Mahout以及聚类分析，并使用实例说明了如何使用Mahout的K-Means进行聚类分析。总的来说，使用Mahout进行聚类分析需要用户将数据转换成Mahout的Vector对象，并且写成Sequence文件格式，然后选择初始的质心和适当的距离度量调用KMeansDriver进行聚类。</p>

<p>当然聚类分析还有很多的内容，比如如何选择距离度量，K值如何确定以及如何度量聚类的好坏等等，本篇文章旨在介绍如何使用Mahout进行聚类分析，更多的关于聚类以及机器学习的知识请您阅读相关的专业书籍。</p>

<h4 id="section-3">参考数目</h4>

<p>[1] Sean Owen etc., Mahout in Action, Manning Publications, 2011</p>

<p>[2] Pang-Ning Tan等, 数据挖掘导论, 人民邮电出版社, 2011 </p>

<p>[3] 文中代码实例的源码地址<a href="https://github.com/yoyzhou/weibo_analysis/blob/master/src/com/yoyzhou/weibo/CoFollowedClustering.java">CoFollowedClustering.java</a></p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用RawComparator加速Hadoop程序]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/05/13/hadoop-write-ur-own-rawcomparator/"/>
    <updated>2013-05-13T23:06:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/05/13/hadoop-write-ur-own-rawcomparator</id>
    <content type="html"><![CDATA[<p>在前面两篇文章<a href="http://yoyzhou.github.io/blog/2013/05/09/hadoop-serialization-and-writable-object-1/">[1]</a><a href="http://yoyzhou.github.io/blog/2013/05/10/hadoop-serialization-and-writable-object-2/">[2]</a>中我们介绍了Hadoop序列化的相关知识，包括Writable接口与Writable对象以及如何编写定制的Writable类，深入的分析了Writable类序列化之后占用的字节空间以及字节序列的构成。我们指出Hadoop序列化是Hadoop的核心部分之一，了解和分析Writable类的相关知识有助于我们理解Hadoop序列化的工作方式以及选择合适的Writable类作为MapReduce的键和值，以达到高效利用磁盘空间以及<strong>快速读写对象</strong>。因为在数据密集型计算中，在网络数据的传输是影响计算效率的一个重要因素，选择合适的Writable对象不但减小了磁盘空间，而且更重要的是其减小了需要在网络中传输的数据量，从而加快了程序的速度。</p>

<p>在本文中我们介绍另外一种方法加快程序的速度，这就是<strong>使用RawComparator加速Hadoop程序</strong>。我们知道作为键（Key）的Writable类必须实现WritableComparable接口，以实现对键进行排序的功能。Writable类进行比较时，Hadoop的默认方式是先将序列化后的对象字节流反序列化为对象，然后再进行比较（compareTo方法），比较过程需要一个反序列化的步骤。RawComparator的做法是<strong>不进行反序列化，而是在字节流层面进行比较</strong>，这样就省下了反序列化过程，从而加速程序的运行。Hadoop自身提供的IntWritable、LongWritabe等类已经实现了这种优化，使这些Writable类作为键进行比较时，直接使用序列化的字节数组进行比较大小，而不用进行反序列化。</p>

<h4 id="rawcomparator">RawComparator的实现</h4>

<p>在Hadoop中编写Writable的RawComparator一般不直接继承RawComparator类，而是继承RawComparator的子类<strong>WritableComparator</strong>，因为WritableComparator类为我们提供了一些有用的工具方法，比如从字节数组中读取int、long和vlong等值。下面是上两篇文章中我们定制的MyWritable类的RawComparator实现，定制的MyWritable由两个VLongWritable对组成，为了添加RawComparator功能，Writable类必须实现WritableComparable接口，这里不再展示实现了WritableComparable接口的MyWritableComparable类的全部内容，而只是MyWritableComparable类中Comparator的实现，完整的代码可以在<a href="https://github.com/yoyzhou/weibo_analysis">github</a>中找到。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">...</span><span class="c1">//omitted for conciseness</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * A RawComparator that compares serialized VlongWritable Pair</span>
</span><span class="line"><span class="cm"> * compare method decode long value from serialized byte array one by one</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @author yoyzhou</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Comparator</span> <span class="kd">extends</span> <span class="n">WritableComparator</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="kd">public</span> <span class="nf">Comparator</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">		<span class="kd">super</span><span class="o">(</span><span class="n">MyWritableComparable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">b1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l1</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">b2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">		<span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">		<span class="c1">//determine how many bytes the first VLong takes</span>
</span><span class="line">		<span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="n">WritableUtils</span><span class="o">.</span><span class="na">decodeVIntSize</span><span class="o">(</span><span class="n">b1</span><span class="o">[</span><span class="n">s1</span><span class="o">]);</span>
</span><span class="line">		<span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">WritableUtils</span><span class="o">.</span><span class="na">decodeVIntSize</span><span class="o">(</span><span class="n">b2</span><span class="o">[</span><span class="n">s2</span><span class="o">]);</span>
</span><span class="line">
</span><span class="line">		<span class="k">try</span> <span class="o">{</span>
</span><span class="line">			<span class="c1">//read value from VLongWritable byte array</span>
</span><span class="line">			<span class="kt">long</span> <span class="n">l11</span> <span class="o">=</span> <span class="n">readVLong</span><span class="o">(</span><span class="n">b1</span><span class="o">,</span> <span class="n">s1</span><span class="o">);</span>
</span><span class="line">			<span class="kt">long</span> <span class="n">l21</span> <span class="o">=</span> <span class="n">readVLong</span><span class="o">(</span><span class="n">b2</span><span class="o">,</span> <span class="n">s2</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">			<span class="n">cmp</span> <span class="o">=</span> <span class="n">l11</span> <span class="o">&gt;</span> <span class="n">l21</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">(</span><span class="n">l11</span> <span class="o">==</span> <span class="n">l21</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">			<span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">				<span class="k">return</span> <span class="n">cmp</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">				<span class="kt">long</span> <span class="n">l12</span> <span class="o">=</span> <span class="n">readVLong</span><span class="o">(</span><span class="n">b1</span><span class="o">,</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">n1</span><span class="o">);</span>
</span><span class="line">				<span class="kt">long</span> <span class="n">l22</span> <span class="o">=</span> <span class="n">readVLong</span><span class="o">(</span><span class="n">b2</span><span class="o">,</span> <span class="n">s2</span> <span class="o">+</span> <span class="n">n2</span><span class="o">);</span>
</span><span class="line">				<span class="k">return</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">l12</span> <span class="o">&gt;</span> <span class="n">l22</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">(</span><span class="n">l12</span> <span class="o">==</span> <span class="n">l22</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">				<span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">static</span> <span class="o">{</span> <span class="c1">// register this comparator</span>
</span><span class="line">	<span class="n">WritableComparator</span><span class="o">.</span><span class="na">define</span><span class="o">(</span><span class="n">MyWritableComparable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">Comparator</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过上面的代码我们可以看到要实现Writable的RawComparator我们只需要重载WritableComparator的<code>public int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)</code>方法。在我们的例子中，通过从VLongWritable对序列化后字节数组中一个一个的读取VLongWritable的值，再进行比较。</p>

<p>当然编写完compare方法之后，不要忘了为Writable类注册编写的RawComparator类。</p>

<h4 id="section">总结</h4>

<p>为Writable类编写RawComparator必须对Writable本身序列化之后的字节数组有清晰的了解，知道如何从字节数组中读取Writable对象的值，而这正是我们前两篇关于<strong>Hadoop序列化和Writable接口</strong>的文章所要阐述的内容。</p>

<p>通过以上的三篇文章，我们了解了Hadoop Writable接口，如何编写自己的Writable类，Writable类的字节序列长度与其构成，以及如何为Writable类编写RawComparator来为Hadoop提速。</p>

<h4 id="section-1">参考资料</h4>

<p>Tom White, Hadoop: The Definitive Guide, 3rd Edition </p>

<p><a href="http://yoyzhou.github.io/blog/2013/05/09/hadoop-serialization-and-writable-object-1/">Hadoop序列化与Writable接口(一)</a></p>

<p><a href="http://yoyzhou.github.io/blog/2013/05/10/hadoop-serialization-and-writable-object-2/">Hadoop序列化与Writable接口(二)</a></p>

<p><code>--EOF--</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop序列化与Writable接口(二)]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/05/10/hadoop-serialization-and-writable-object-2/"/>
    <updated>2013-05-10T20:56:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/05/10/hadoop-serialization-and-writable-object-2</id>
    <content type="html"><![CDATA[<p>上一篇文章<a href="http://yoyzhou.github.io/blog/2013/05/09/hadoop-serialization-and-writable-object-1/">Hadoop序列化与Writable接口（一）</a>介绍了Hadoop序列化，Hadoop Writable接口以及如何定制自己的Writable类，在本文中我们继续Hadoop Writable类的介绍，这一次我们关注的是Writable实例序列化之后占用的字节长度，以及Writable实例序列化之后的字节序列的构成。</p>

<h4 id="writable">为什么要考虑Writable类的字节长度</h4>

<p>大数据程序还需要考虑序列化对象占用磁盘空间的大小吗？也许你会认为<strong>大数据</strong>不是就是数据量很大吗，那磁盘空间一定是足够足够的大，一个序列化对象仅仅占用几个到几十个字节的空间，相对磁盘空间来说，当然是不需要考虑太多；如果你的磁盘空间不够大，还是不要玩大数据的好。</p>

<p>上面的观点没有什么问题，大数据应用自然需要足够的磁盘空间，但是能够尽量的考虑到不同Writable类占用磁盘空间的大小，高效的利用磁盘空间也未必就是没有必要的，选择适当的Writable类的另一个作用是<strong>通过减少Writable实例的字节数，可加快数据的读取和减少网络的数据传输。</strong></p>

<h4 id="writable-1">Writable类占用的字节长度</h4>

<p>下面的表格显示的是Hadoop对Java基本类型包装后相应的Writable类占用的字节长度：</p>

<table>
  <tbody>
    <tr>
      <td>Java基本类型</td>
      <td>Writable实现</td>
      <td>序列化后字节数 (bytes)</td>
    </tr>
    <tr>
      <td>boolean</td>
      <td>BooleanWritable</td>
      <td>1</td>
    </tr>
    <tr>
      <td>byte</td>
      <td>ByteWritable</td>
      <td>1</td>
    </tr>
    <tr>
      <td>short</td>
      <td>ShortWritable</td>
      <td>2</td>
    </tr>
    <tr>
      <td>int</td>
      <td>IntWritable</td>
      <td>4</td>
    </tr>
    <tr>
      <td> </td>
      <td>VIntWritable</td>
      <td>1–5</td>
    </tr>
    <tr>
      <td>float</td>
      <td>FloatWritable</td>
      <td>4</td>
    </tr>
    <tr>
      <td>long</td>
      <td>LongWritable</td>
      <td>8</td>
    </tr>
    <tr>
      <td> </td>
      <td>VLongWritable</td>
      <td>1–9</td>
    </tr>
    <tr>
      <td>double</td>
      <td>DoubleWritable</td>
      <td>8</td>
    </tr>
  </tbody>
</table>

<p>不同的Writable类序列化后占用的字数长度是不一样的，需要综合考虑应用中数据特征选择合适的类型。对于整数类型有两种Writable类型可以选择，一种是定长（fixed-length）Writable类型,IntWritable和LongWritable；另一种是变长（variable-length）Writable类型，VIntWritable和VLongWritable。定长类型顾名思义使用固定长度的字节数表示，比如一个IntWritable类型使用4个长度的字节表示一个int；变长类型则根据数值的大小使用相应的字节长度表示，当数值在-112～127之间时使用1个字节表示，在-112～127范围之外的数值使用头一个字节表示该数值的正负符号以及字节长度（zero-compressed encoded integer）。</p>

<p>定长的Writable类型适合数值均匀分布的情形，而变长的Writable类型适合数值分布不均匀的情形，一般情况下变长的Writable类型更节省空间，因为大多数情况下数值是不均匀的，对于整数类型的Writable选择，我建议：</p>

<blockquote>
  <p>1. 除非对数据的均匀分布很有把握，否则使用变长Writable类型</p>
</blockquote>

<blockquote>
  <p>2. 除非数据的取值区间确定在int范围之内，否则为了程序的可扩展性，请选择VLongWritable类型</p>
</blockquote>

<h4 id="writable-2">整型Writable的字节序列</h4>

<p>下面将以实例的方式演示Hadoop整型Writable对象占用的字节长度以及Writable对象序列化之后字节序列的结构，特别是变长整型Writable实例，请看下面的代码和程序输出：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">yoyzhou</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.*</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.StringUtils</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Demos per how many bytes per each built-in Writable type takes and what does</span>
</span><span class="line"><span class="cm"> * their bytes sequences look like</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * @author yoyzhou</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WritableBytesLengthDemo</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">		<span class="c1">// one billion representations by different Writable object</span>
</span><span class="line">		<span class="n">IntWritable</span> <span class="n">int_b</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">IntWritable</span><span class="o">(</span><span class="mi">1000000000</span><span class="o">);</span>
</span><span class="line">		<span class="n">LongWritable</span> <span class="n">long_b</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LongWritable</span><span class="o">(</span><span class="mi">1000000000</span><span class="o">);</span>
</span><span class="line">		<span class="n">VIntWritable</span> <span class="n">vint_b</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">VIntWritable</span><span class="o">(</span><span class="mi">1000000000</span><span class="o">);</span>
</span><span class="line">		<span class="n">VLongWritable</span> <span class="n">vlong_b</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">VLongWritable</span><span class="o">(</span><span class="mi">1000000000</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		<span class="c1">// serialize writable object to byte array</span>
</span><span class="line">		<span class="kt">byte</span><span class="o">[]</span> <span class="n">bs_int_b</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">int_b</span><span class="o">);</span>
</span><span class="line">		<span class="kt">byte</span><span class="o">[]</span> <span class="n">bs_long_b</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">long_b</span><span class="o">);</span>
</span><span class="line">		<span class="kt">byte</span><span class="o">[]</span> <span class="n">bs_vint_b</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">vint_b</span><span class="o">);</span>
</span><span class="line">		<span class="kt">byte</span><span class="o">[]</span> <span class="n">bs_vlong_b</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">vlong_b</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		<span class="c1">// print byte array in hex string and their length</span>
</span><span class="line">		<span class="n">String</span> <span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">bs_int_b</span><span class="o">);</span>
</span><span class="line">		<span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;IntWritable&quot;</span><span class="o">,</span> <span class="s">&quot;1,000,000,000&quot;</span><span class="o">,</span><span class="n">hex</span><span class="o">,</span> <span class="n">bs_int_b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		<span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">bs_long_b</span><span class="o">);</span>
</span><span class="line">		<span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;LongWritable&quot;</span><span class="o">,</span> <span class="s">&quot;1,000,000,000&quot;</span><span class="o">,</span><span class="n">hex</span><span class="o">,</span> <span class="n">bs_long_b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		<span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">bs_vint_b</span><span class="o">);</span>
</span><span class="line">		<span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;VIntWritable&quot;</span><span class="o">,</span> <span class="s">&quot;1,000,000,000&quot;</span><span class="o">,</span><span class="n">hex</span><span class="o">,</span> <span class="n">bs_vint_b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		<span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">bs_vlong_b</span><span class="o">);</span>
</span><span class="line">		<span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;VLongWritable&quot;</span><span class="o">,</span> <span class="s">&quot;1,000,000,000&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">bs_vlong_b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line">		
</span><span class="line">		
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">formatPrint</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">,</span> <span class="n">String</span> <span class="n">param</span><span class="o">,</span> <span class="n">String</span> <span class="n">hex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">		<span class="n">String</span> <span class="n">format</span> <span class="o">=</span> <span class="s">&quot;%1$-50s %2$-16s with length: %3$2d%n&quot;</span><span class="o">;</span>
</span><span class="line">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">format</span><span class="o">,</span> <span class="s">&quot;Byte array per &quot;</span> <span class="o">+</span> <span class="n">type</span>
</span><span class="line">				<span class="o">+</span> <span class="s">&quot;(&quot;</span><span class="o">+</span> <span class="n">param</span> <span class="o">+</span><span class="s">&quot;) is:&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="cm">/**</span>
</span><span class="line"><span class="cm">	 * Utility method to serialize Writable object, return byte array</span>
</span><span class="line"><span class="cm">	 * representing the Writable object</span>
</span><span class="line"><span class="cm">	 * </span>
</span><span class="line"><span class="cm">	 * */</span>
</span><span class="line">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">serialize</span><span class="o">(</span><span class="n">Writable</span> <span class="n">writable</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">		<span class="n">ByteArrayOutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class="line">		<span class="n">DataOutputStream</span> <span class="n">dataOut</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DataOutputStream</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">		<span class="n">writable</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">dataOut</span><span class="o">);</span>
</span><span class="line">		<span class="n">dataOut</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">		<span class="k">return</span> <span class="n">out</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="cm">/**</span>
</span><span class="line"><span class="cm">	 * Utility method to deserialize input byte array, return Writable object</span>
</span><span class="line"><span class="cm">	 * </span>
</span><span class="line"><span class="cm">	 * */</span>
</span><span class="line">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Writable</span> <span class="nf">deserialize</span><span class="o">(</span><span class="n">Writable</span> <span class="n">writable</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">)</span>
</span><span class="line">			<span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">		<span class="n">ByteArrayInputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class="line">		<span class="n">DataInputStream</span> <span class="n">dataIn</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DataInputStream</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class="line">		<span class="n">writable</span><span class="o">.</span><span class="na">readFields</span><span class="o">(</span><span class="n">dataIn</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		<span class="n">dataIn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">		<span class="k">return</span> <span class="n">writable</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>程序输出：</p>

<pre><code>Byte array per IntWritable(1,000,000,000) is:  \     
3b9aca00         with length:  4

Byte array per LongWritable(1,000,000,000) is: \     
000000003b9aca00 with length:  8

Byte array per VIntWritable(1,000,000,000) is: \     
8c3b9aca00       with length:  5

Byte array per VLongWritable(1,000,000,000) is:\    
8c3b9aca00       with length:  5
</code></pre>

<p>从上面的输出我们可以看出：</p>

<p>+ 对1,000,000,000的表示不同的Writable占用了不同字节长度</p>

<p>+ 变长Writable类型并不总是比定长类型更加节省空间，当IntWritable占用4个字节、LongWritable占用8个字节时，相应的变长Writable需要一个额外的字节来存放正负信息和字节长度。所以回到前面的整数类型选择的问题上，<strong>选择出最合适的整数Writable类型，我们应该对数值的总体分布有一定的认识</strong>。</p>

<h4 id="text">Text的字节序列</h4>

<p>可以简单的认为Text类是java.lang.String的Writable类型，但是要注意的是Text类对于Unicode字符采用的是UTF-8编码，而不是使用Java Character类的UTF-16编码。</p>

<p>Java Character类采用遵循Unicode Standard version 4的UTF-16编码<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html">[1]</a>，每个字符采用定长的16位(两个字节)进行编码，对于代码点高于Basic Multilingual Plane(BMP，代码点U+0000～U+FFFF)的增补字符，采用两个代理字符进行表示。</p>

<p>Text类采用的UTF-8编码，使用变长的1～4个字节对字符进行编码。对于ASCII字符只使用1个字节，而对于High ASCII和多字节字符使用2～4个字节表示，我想Hadoop在设计时选择使用UTF-8而不是String的UTF-16就是基于上面的原因，为了节省字节长度/空间的考虑。</p>

<blockquote>
  <p>由于Text采用的是UTF-8编码，所以Text类没有提供String那样多的操作，并且在操作Text对象时，比如Indexing和Iteration，一定要注意这个区别，不过我们建议在进行Text操作时，如果可能可以将Text对象先转换成String，再进行操作。</p>
</blockquote>

<p>Text类的字节序列表示为一个VIntWritable + UTF-8字节流，VIntWritable为整个Text的字符长度，UTF-8字节数组为真正的Text字节流。具体请看下面的代码片段：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">...</span><span class="c1">//omitted per conciseness</span>
</span><span class="line"><span class="n">Text</span> <span class="n">myText</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Text</span><span class="o">(</span><span class="s">&quot;my text&quot;</span><span class="o">);</span>
</span><span class="line"><span class="kt">byte</span><span class="o">[]</span> <span class="n">text_bs</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">myText</span><span class="o">);</span>
</span><span class="line"><span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">text_bs</span><span class="o">);</span>
</span><span class="line"><span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;Text&quot;</span><span class="o">,</span> <span class="s">&quot;\&quot;my text\&quot;&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">text_bs</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line">		
</span><span class="line"><span class="n">Text</span> <span class="n">myText2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Text</span><span class="o">(</span><span class="s">&quot;我的文本&quot;</span><span class="o">);</span>
</span><span class="line"><span class="kt">byte</span><span class="o">[]</span> <span class="n">text2_bs</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">myText2</span><span class="o">);</span>
</span><span class="line"><span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">text2_bs</span><span class="o">);</span>
</span><span class="line"><span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;Text&quot;</span><span class="o">,</span> <span class="s">&quot;\&quot;我的文本\&quot;&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">text2_bs</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line"><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>程序输出：</p>

<pre><code>Byte array per Text("my text") is: \
 	076d792074657874 with length:  8

Byte array per Text("我的文本") is: \
0ce68891e79a84e69687e69cac with length: 13
</code></pre>

<p>在上面的输出中，首个字节代表的该段Text/文本的长度，在UTF-8编码下“my text”占用的字节长度为7个字节（07），而中文“我的文本”的字节长度是12个字节（0c）。</p>

<h4 id="writable-3">定制Writable类的字节序列</h4>

<p>本节中我们将使用上篇文章中的MyWritable类进行说明，回顾一下，MyWritable是一个由两个VLongWritable类构成的定制化Writable类型。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">...</span><span class="c1">//omitted per conciseness</span>
</span><span class="line"><span class="n">MyWritable</span> <span class="n">customized</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyWritable</span><span class="o">(</span><span class="k">new</span> <span class="nf">VLongWritable</span><span class="o">(</span><span class="mi">1000</span><span class="o">),</span>
</span><span class="line"> 						<span class="k">new</span> <span class="nf">VLongWritable</span><span class="o">(</span><span class="mi">1000000000</span><span class="o">));</span>
</span><span class="line"><span class="kt">byte</span><span class="o">[]</span> <span class="n">customized_bs</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">customized</span><span class="o">);</span>
</span><span class="line"><span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">customized_bs</span><span class="o">);</span>
</span><span class="line"><span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;MyWritable&quot;</span><span class="o">,</span> <span class="s">&quot;1000, 1000000000&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">customized_bs</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line"><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>程序输出：</p>

<pre><code>Byte array per MyWritable(1000, 1000000000) is: \
8e03e88c3b9aca00 with length:  8
</code></pre>

<p>从输出我们可以很清楚的看到，定制的Writable类的字节序列实际上就是基本Writable类型的组合，输出“8e03e88c3b9aca00”的前三个字节是1000的VLongWritable的字节序列，“8c3b9aca00”是1000000000VLongWritable的字节序列，这一点可以从我们编写的MyWritable类的write方法中找到答案：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">...</span><span class="c1">//omitted per conciseness</span>
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">DataOutput</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">	<span class="n">field1</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">	<span class="n">field2</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section">总结</h4>

<p>本文通过实例介绍了Hadoop Writable类序列化时占用的字节长度，并分析了Writable类序列化后的字节序列的结构。需要注意的是Text类为了节省空间的目的采用了UTF-8的编码，而不是Java Character的UTF-16编码，自定义的Writable的字节序列与该Writable类的write()方法有关。</p>

<p>最后指出，Writable是Hadoop序列化的核心，理解Hadoop Writable的字节长度和字节序列对于选择合适的Writable对象以及在字节层面操作Writable对象至关重要。</p>

<h4 id="section-1">参考资料</h4>

<p>Tom White, Hadoop: The Definitive Guide, 3rd Edition </p>

<p><a href="http://yoyzhou.github.io/blog/2013/05/09/hadoop-serialization-and-writable-object-1/">Hadoop序列化与Writable接口(一)</a></p>

<p><code>---EOF---</code></p>

<!-- reference-like links -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop序列化与Writable接口(一)]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/05/09/hadoop-serialization-and-writable-object-1/"/>
    <updated>2013-05-09T20:49:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/05/09/hadoop-serialization-and-writable-object-1</id>
    <content type="html"><![CDATA[<h4 id="section">序列化</h4>

<p><strong>序列化</strong>（serialization）是指将结构化的对象转化为字节流，以便在网络上传输或者写入到硬盘进行永久存储；相对的<strong>反序列化</strong>（deserialization）是指将字节流转回到结构化对象的过程。</p>

<p>在分布式系统中进程将对象序列化为字节流，通过网络传输到另一进程，另一进程接收到字节流，通过反序列化转回到结构化对象，以达到进程间通信。在Hadoop中，Mapper，Combiner，Reducer等阶段之间的通信都需要使用序列化与反序列化技术。举例来说，Mapper产生的中间结果（<code>&lt;key: value1, value2...&gt;</code>）需要写入到本地硬盘，这是序列化过程（将结构化对象转化为字节流，并写入硬盘），而Reducer阶段读取Mapper的中间结果的过程则是一个反序列化过程（读取硬盘上存储的字节流文件，并转回为结构化对象），需要注意的是，能够在网络上传输的只能是字节流，Mapper的中间结果在不同主机间洗牌时，对象将经历序列化和反序列化两个过程。</p>

<p>序列化是Hadoop核心的一部分，在Hadoop中，位于org.apache.hadoop.io包中的Writable接口是Hadoop序列化格式的实现。</p>

<h4 id="writable">Writable接口</h4>

<p>Hadoop Writable接口是基于DataInput和DataOutput实现的序列化协议，紧凑（高效使用存储空间），快速（读写数据、序列化与反序列化的开销小）。Hadoop中的键（key）和值（value）必须是实现了Writable接口的对象（键还必须实现WritableComparable，以便进行排序）。</p>

<p>以下是Hadoop（使用的是Hadoop 1.1.2）中Writable接口的声明：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">hadoop</span><span class="o">.</span><span class="na">io</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataOutput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataInput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Writable</span> <span class="o">{</span>
</span><span class="line">  <span class="cm">/** </span>
</span><span class="line"><span class="cm">   * Serialize the fields of this object to &lt;code&gt;out&lt;/code&gt;.</span>
</span><span class="line"><span class="cm">   * </span>
</span><span class="line"><span class="cm">   * @param out &lt;code&gt;DataOuput&lt;/code&gt; to serialize this object into.</span>
</span><span class="line"><span class="cm">   * @throws IOException</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">DataOutput</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/** </span>
</span><span class="line"><span class="cm">   * Deserialize the fields of this object from &lt;code&gt;in&lt;/code&gt;.  </span>
</span><span class="line"><span class="cm">   * </span>
</span><span class="line"><span class="cm">   * &lt;p&gt;For efficiency, implementations should attempt to re-use storage in the </span>
</span><span class="line"><span class="cm">   * existing object where possible.&lt;/p&gt;</span>
</span><span class="line"><span class="cm">   * </span>
</span><span class="line"><span class="cm">   * @param in &lt;code&gt;DataInput&lt;/code&gt; to deseriablize this object from.</span>
</span><span class="line"><span class="cm">   * @throws IOException</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kt">void</span> <span class="nf">readFields</span><span class="o">(</span><span class="n">DataInput</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="writable-1">Writable类</h4>

<p>Hadoop自身提供了多种具体的Writable类，包含了常见的Java基本类型（boolean、byte、short、int、float、long和double等）和集合类型（BytesWritable、ArrayWritable和MapWritable等）。这些类型都位于org.apache.hadoop.io包中。</p>

<p><img src="http://yoyzhou.github.io/images/hadoop-writable-class.png" alt="writable-classes" /></p>

<p>(图片来源：safaribooksonline.com)</p>

<h4 id="writable-2">定制Writable类</h4>

<p>虽然Hadoop内建了多种Writable类提供用户选择，Hadoop对Java基本类型的包装Writable类实现的RawComparable接口，使得这些对象不需要反序列化过程，便可以在字节流层面进行排序，从而大大缩短了比较的时间开销，但是当我们需要更加复杂的对象时，Hadoop的内建Writable类就不能满足我们的需求了(需要注意的是Hadoop提供的Writable集合类型并没有实现RawComparable接口，因此也不满足我们的需要)，这时我们就需要定制自己的Writable类，特别将其作为键（key）的时候更应该如此，以求达到更高效的存储和快速的比较。</p>

<p>下面的实例展示了如何定制一个Writable类，一个定制的Writable类首先必须实现Writable或者WritableComparable接口，然后为定制的Writable类编写write(DataOutput out)和readFields(DataInput in)方法，来控制定制的Writable类如何转化为字节流（write方法）和如何从字节流转回为Writable对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">yoyzhou</span><span class="o">.</span><span class="na">weibo</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataInput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataOutput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.VLongWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Writable</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> *This MyWritable class demonstrates how to write a custom Writable class </span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> **/</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyWritable</span> <span class="kd">implements</span> <span class="n">Writable</span><span class="o">{</span>
</span><span class="line">		
</span><span class="line">		
</span><span class="line">	<span class="kd">private</span> <span class="n">VLongWritable</span> <span class="n">field1</span><span class="o">;</span>
</span><span class="line">	<span class="kd">private</span> <span class="n">VLongWritable</span> <span class="n">field2</span><span class="o">;</span>
</span><span class="line">		
</span><span class="line">	<span class="kd">public</span> <span class="nf">MyWritable</span><span class="o">(){</span>
</span><span class="line">		<span class="k">this</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="nf">VLongWritable</span><span class="o">(),</span> <span class="k">new</span> <span class="nf">VLongWritable</span><span class="o">());</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">		
</span><span class="line">		
</span><span class="line">	<span class="kd">public</span> <span class="nf">MyWritable</span><span class="o">(</span><span class="n">VLongWritable</span> <span class="n">fld1</span><span class="o">,</span> <span class="n">VLongWritable</span> <span class="n">fld2</span><span class="o">){</span>
</span><span class="line">			
</span><span class="line">		<span class="k">this</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">fld1</span><span class="o">,</span> <span class="n">fld2</span><span class="o">);</span>
</span><span class="line">			
</span><span class="line">	<span class="o">}</span>
</span><span class="line">		
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">VLongWritable</span> <span class="n">fld1</span><span class="o">,</span> <span class="n">VLongWritable</span> <span class="n">fld2</span><span class="o">){</span>
</span><span class="line">		<span class="c1">//make sure the smaller field is always put as field1</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">fld1</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">fld2</span><span class="o">.</span><span class="na">get</span><span class="o">()){</span>
</span><span class="line">			<span class="k">this</span><span class="o">.</span><span class="na">field1</span> <span class="o">=</span> <span class="n">fld1</span><span class="o">;</span>
</span><span class="line">			<span class="k">this</span><span class="o">.</span><span class="na">field2</span> <span class="o">=</span> <span class="n">fld2</span><span class="o">;</span>
</span><span class="line">		<span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class="line">				
</span><span class="line">			<span class="k">this</span><span class="o">.</span><span class="na">field1</span> <span class="o">=</span> <span class="n">fld2</span><span class="o">;</span>
</span><span class="line">			<span class="k">this</span><span class="o">.</span><span class="na">field2</span> <span class="o">=</span> <span class="n">fld1</span><span class="o">;</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">				
</span><span class="line">	<span class="c1">//How to write and read MyWritable fields from DataOutput and DataInput stream</span>
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">DataOutput</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">			
</span><span class="line">		<span class="n">field1</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">		<span class="n">field2</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">readFields</span><span class="o">(</span><span class="n">DataInput</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">			
</span><span class="line">		<span class="n">field1</span><span class="o">.</span><span class="na">readFields</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class="line">		<span class="n">field2</span><span class="o">.</span><span class="na">readFields</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="cm">/** Returns true if &lt;code&gt;o&lt;/code&gt; is a MyWritable with the same values. */</span>
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		 <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">MyWritable</span><span class="o">))</span>
</span><span class="line">		    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">		
</span><span class="line">		    <span class="n">MyWritable</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">MyWritable</span><span class="o">)</span><span class="n">o</span><span class="o">;</span>
</span><span class="line">		    <span class="k">return</span> <span class="n">field1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">field1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">field2</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">field2</span><span class="o">);</span>
</span><span class="line">		
</span><span class="line">	<span class="o">}</span>
</span><span class="line">		
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">(){</span>
</span><span class="line">			
</span><span class="line">		<span class="k">return</span> <span class="n">field1</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">*</span> <span class="mi">163</span> <span class="o">+</span> <span class="n">field2</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">		
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">		<span class="k">return</span> <span class="n">field1</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span> <span class="o">+</span> <span class="n">field2</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">		
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>未完待续，下一篇中将介绍Writable对象序列化为字节流时占用的字节长度以及其字节序列的构成。</p>

<h4 id="section-1">参考资料</h4>

<p>Tom White, Hadoop: The Definitive Guide, 3rd Edition </p>

<p><code>---To Be Continued---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微博名人关注网络的社会网络分析]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/04/29/viz-following-networks-of-weibo-celebrities/"/>
    <updated>2013-04-29T22:41:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/04/29/viz-following-networks-of-weibo-celebrities</id>
    <content type="html"><![CDATA[<p>社交网络分析起源于社会学家使用数学与图论的方法研究社会群组中人与人之间的交互关系，如中心性分析、凝聚子群分析、社会结构分析等，最著名的莫过于美国社会心理学家Stanley Milgram的”六度分离理论”。传统的社会网络分析重点研究的是社会网络分析的概念以及通过社会网络分析研究社会结构对人、组织的影响，但是由于天然的地域限制，网络的大小受到一定的限制。</p>

<p>随着互联网的出现，特别是社交网站的迅速崛起，国外的Facebook、Twitter、Linked，国内的人人、微博等，互联网赋予了社交网络分析前所未有的机遇和新的挑战。首先，互联网打破了地域的限制，无论来自任何地方都可以通过互联网发生联系，目前Facebook有超过10亿的用户，他们来自全球，相互成为好友；其次，获得研究数据变得非常容易，社交网站拥有大量的用户数据，这些数据对社会网络分析来说就是宝贵的财富，以前从未有过，这也是目前社会网络分析在互联网爆发的主要原因；再次，相比于单一的人与人之间的交互关系，社交网站有着丰富的多媒体信息，除了用户关系，还有文本、图片、视频等内容。</p>

<p>但是数据不是信息，面对社交网站上的海量数据，需要有新的方法处理大数据，并从海量数据中挖掘出有价值的信息；同时应用社交网站的用户信息还面临这隐私保护的问题。</p>

<p>本文从社会网络分析的角度分析新浪微博名人帐号的关注网络，通过中介中心性分析关注网络中的控制网络信息流动的中心人物，并且使用<a href="http://en.wikipedia.org/wiki/Modularity_(networks)">Modularity</a>（模块、群组）算法将关注网络划分为不同群组，最后我们使用Gephi可视化微博名人的关注网络。</p>

<h3 id="section">相关理论简介</h3>

<h4 id="section-1">中介中心性</h4>

<p>中介中心性（Betweenness Centrality）是处于网络中的点的中心性/重要程度的一种度量方式，网络中点的中介中心性直观的定义为“该点处于其他点最短路径上的次数”，处于这样位置上的点对路径上的信息传输具有一定的控制（阻止、掩饰、歪曲）能力。因此在同一个网络中，哪一个点的中介中心性越高，该点在网络中对信息的控制能力就越强，相反，中介中心性低，对信息的控制也就低。</p>

<p>如果希望了解中介中心性的详细内容，可参考Wikipedia上的词条<a href="http://en.wikipedia.org/wiki/Betweenness_centrality">Betweenness Centrality</a>，和我的的上两篇文章<a href="http://yoyzhou.github.io/blog/2013/04/28/studying-notes-a-set-of-measures-of-centrality-based-on-betweenness/">A Set of Measures of Centrality Based on Betweenness</a>与<a href="http://yoyzhou.github.io/blog/2013/04/29/a-kinda-betweenness-centrality-algorithm/">A Kinda Betweenness Centrality Algorithm</a>。</p>

<h4 id="section-2">网络群组</h4>

<p>网络群组（Modularity）是社会网络分析中用于分析网络结构的一种方法。根据一个群组内部比群组外部具有更高密度的联结的原则，它将网络分成不同的群组（通常也叫群（groups）、族群（clusters）或者社群（communities）），通常用来侦测网络的社群结构。</p>

<p>更多群组的信息请参考Wikipedia词条<a href="http://en.wikipedia.org/wiki/Modularity_(networks)">Modularity</a>.</p>

<h3 id="section-3">数据来源</h3>

<h4 id="section-4">数据收集</h4>

<p>本文所使用的数据来源于新浪微博的用户关注信息，一共收集了30999个新浪微博用户的关注信息，去重后被关注的用户数量为3,940,891位。</p>

<p>以下是收集数据的概述：</p>

<p><strong>数据收集时间</strong>：2013.3.18~2013.4.2</p>

<p><strong>原始数据</strong>：包含两部分，一部分是用户信息，另一部分是用户的关注信息</p>

<p><strong>用户信息</strong>：用户信息从用户的/info页面上收集</p>

<p><strong>用户关注信息</strong>：用户关注信息从用户的/follow页面逐页收集</p>

<h4 id="section-5">数据预处理</h4>

<p>首先，我们定义微博名人为：在我们所收集的数据中，被关注的次数大于等于1000；然后利用上小节中收集的数据，使用<a href="http://hadoop.apache.org/">Hadoop</a>将数据处理为：”用户, 关注用户”的形式。对于如何在Hadoop中使用Filter处理数据可以参考我的文章<a href="http://yoyzhou.github.io/blog/2013/04/21/adding-filter-in-hadoop-mapper-class/">Adding Filter in Hadoop Mapper Class</a>；最后我们获得了一个包含218,071个节点，677,268条边的微薄名人（有向）关注网络。</p>

<p>需要注意的是在下面的分析中，由于计算资源的有限，我们在Hadoop获得的结果上，进一步将节点数缩小到100个，相应的边的数量为4820。这一步骤是由限制名人网络中节点入度为178实现的。</p>

<h3 id="section-6">微博名人关注网络分析</h3>

<h4 id="section-7">中介中心性和群组分析</h4>

<p>下表列出了中介中心性Top20的微博名人（数据保留小数点后两位）。可以看出在我们的数据集中老沉（新浪执行副总裁、总编辑陈彤）、薛蛮子（著名天使投资人）和徐小平（真格基金创始人、新东方联合创始人）名列前三，李开复中心性值排在第七，为108.16；有11个账户的中介中心性值超过100，他们在网络中处于最短路径上的次数大于100。</p>

<table>
  <tbody>
    <tr>
      <td>排名</td>
      <td>微博帐号</td>
      <td>中介中心性值</td>
      <td>群组</td>
    </tr>
    <tr>
      <td>1</td>
      <td>老沉</td>
      <td>188.31</td>
      <td>0</td>
    </tr>
    <tr>
      <td>2</td>
      <td>薛蛮子</td>
      <td>156.74</td>
      <td>2</td>
    </tr>
    <tr>
      <td>3</td>
      <td>徐小平</td>
      <td>142.70</td>
      <td>0</td>
    </tr>
    <tr>
      <td>4</td>
      <td>王利芬</td>
      <td>127.67</td>
      <td>0</td>
    </tr>
    <tr>
      <td>5</td>
      <td>正和岛刘东华</td>
      <td>124.40</td>
      <td>0</td>
    </tr>
    <tr>
      <td>6</td>
      <td>封新城</td>
      <td>119.40</td>
      <td>2</td>
    </tr>
    <tr>
      <td>7</td>
      <td>李开复</td>
      <td>108.16</td>
      <td>0</td>
    </tr>
    <tr>
      <td>8</td>
      <td>巴曙松</td>
      <td>104.45</td>
      <td>1</td>
    </tr>
    <tr>
      <td>9</td>
      <td>作业本</td>
      <td>103.95</td>
      <td>2</td>
    </tr>
    <tr>
      <td>10</td>
      <td>刘春</td>
      <td>101.13</td>
      <td>1</td>
    </tr>
    <tr>
      <td>11</td>
      <td>张力奋</td>
      <td>100.36</td>
      <td>1</td>
    </tr>
    <tr>
      <td>12</td>
      <td>王冉</td>
      <td>99.05</td>
      <td>0</td>
    </tr>
    <tr>
      <td>13</td>
      <td>财经网</td>
      <td>97.46</td>
      <td>1</td>
    </tr>
    <tr>
      <td>14</td>
      <td>华尔街日报中文网</td>
      <td>94.45</td>
      <td>0</td>
    </tr>
    <tr>
      <td>15</td>
      <td>李承鹏</td>
      <td>88.33</td>
      <td>2</td>
    </tr>
    <tr>
      <td>16</td>
      <td>王克勤</td>
      <td>84.17</td>
      <td>2</td>
    </tr>
    <tr>
      <td>17</td>
      <td>韩寒</td>
      <td>79.72</td>
      <td>2</td>
    </tr>
    <tr>
      <td>18</td>
      <td>章立凡</td>
      <td>76.93</td>
      <td>2</td>
    </tr>
    <tr>
      <td>19</td>
      <td>南都周刊</td>
      <td>75.87</td>
      <td>0</td>
    </tr>
    <tr>
      <td>20</td>
      <td>钱钢</td>
      <td>75.75</td>
      <td>2</td>
    </tr>
  </tbody>
</table>

<p>上表中“群组”列给出了中心性Top20微博名人的群组分类，将他们大致分为三个群组：</p>

<blockquote>
  <p>+ <strong>互联网+青年导师</strong>，</p>
</blockquote>

<blockquote>
  <p>+ <strong>新闻媒体相关</strong>，和</p>
</blockquote>

<blockquote>
  <p>+ <strong>新知识分子</strong>。</p>
</blockquote>

<p>更直观的分类请参看下小节的可视化分析。</p>

<h4 id="section-8">可视化分析</h4>

<p>我们使用<a href="https://gephi.org/">Gephi</a>对微博名人关注网络数据进行可视化分析。如下图所示：</p>

<p>图中节点大小代表中介中心性的大小，节点的颜色代表相应的群组，相同的节点颜色表示处于同一个群组，从图中可以清楚的看到群组的分布情况。</p>

<p><img src="http://yoyzhou.github.io/images/fntk100.png" alt="fntk_100" /></p>

<p><strong>动态交互网络</strong>：</p>

<p><a href="http://yoyzhou.github.io/network/index.html">动态交互网络/Interactive Dynamic Network</a></p>

<h3 id="section-9">结束语</h3>

<p>本文运用社会网络分析方法，通过中介中心性和群组两个维度，对微博名人的关注网络进行了分析，通过分析我们得出了微博名人中介中心性，并且将微博名人的关注网络划分为了三个群组。</p>

<p>虽然本文作者设想将本文作为<code>大数据</code>来进行分析，但是由于计算资源的有限，只能将分析的节点数一再降低；本文中对名人界定以数据集中被关注数量进行度量，更加准确的度量应该以现实微博中用户的被关注数量。</p>

<p>如何在MapReduce框架下进行社交网络分析，将会是一个很价值的主题。</p>

<p>最后，由于本文使用的数据是SINA微博用户数据的很小一部分，文中的排名和可视化网络并非SINA微博真实情况的反映，结论仅供参考。</p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Kinda Betweenness Centrality Algorithm]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/04/29/a-kinda-betweenness-centrality-algorithm/"/>
    <updated>2013-04-29T15:06:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/04/29/a-kinda-betweenness-centrality-algorithm</id>
    <content type="html"><![CDATA[<p>In this post I’d like to demonstrate a algorithm per computing the betweenness centrality which I have introduced in the previous post, for more details of what is Betweenness Centrality, and its measurements, please refer to my post <a href="http://yoyzhou.github.io/blog/2013/04/28/studying-notes-a-set-of-measures-of-centrality-based-on-betweenness/">A Set of Measures of Centrality Based on Betweenness</a>. </p>

<h4 id="definitions-and-notations">Definitions and notations</h4>

<p>Before getting down to the algorithm, first we briefly go through the definitions and notations.</p>

<p><strong><em>Betweenness Centrality</em></strong> is “the degree to which a point falls on the shortest path between others”, it’s the core of the algorithm. Although computing <a href="http://en.wikipedia.org/wiki/Shortest_path_problem">shortest path</a> between point pair is essential to our problem, shortest path algorithm will not be the focus of this post. Readers interested in shortest path algorithm please refer to the shortest path on Wikipedia page <a href="http://en.wikipedia.org/wiki/Shortest_path_problem">here</a>, kindly note that even if you have no knowledge of shortest path algorithm, it will not affect you reading this post.</p>

<p>In the next section, we use graph-theoretic terminology neutral to interpretation of notations.</p>

<p>Given a <em>directed graph</em> <script type="math/tex">\begin{smallmatrix} G = \left( V, E \right) \end{smallmatrix}</script>, consists of a set of $V$ of vertices and a set of $E \subseteq V \times V$ of <em>derected</em> edges.</p>

<p>Denote $\sigma(s, t)$ to the number of <em>shortest</em> $(s, t)$-paths, some times called geodesics, and let <script type="math/tex">\sigma(s,t \vert v)</script> be the number of shortest path which passing through certain vertex $v$ other than $s, t$, then the <em>betweenness centrality</em> $C_B(v)$ of vertex $v \in V$ is defined to be:</p>

<script type="math/tex; mode=display">\begin{align}  C_B(v) = \sum\limits_{s,t \in V} \frac{\sigma(s,t \vert v)}{\sigma(s, t)} \end{align}</script>

<h4 id="the-algorithm">The Algorithm</h4>
<p>As quoted from “On variants of shortest-path betweenness centrality and their computation”:</p>

<blockquote>
  <p>Efficient computation of betweenness is based on the fact that the cubic number of <em>pair-wise dependencies <script type="math/tex">\delta(s,t \vert v) = \sigma(s, t \vert v)/ \sigma(s, t)</script></em> can be aggregated without computing all of them explicitly.</p>
</blockquote>

<p>Defining one-side dependencies:</p>

<p><script type="math/tex">\begin{align} \delta(s \vert v) = \sum\limits_{t \in V} \delta(s, t \vert v)\end{align}</script>,</p>

<p>per <script type="math/tex">\forall s, v \in V</script> we can exploit that</p>

<script type="math/tex; mode=display">\begin{align} \delta(s \vert v) = \sum\limits_{w: (v, w) \in E  \ and \\\ dist(s, w) = dist(s, v) + 1} \left[ \frac{\sigma(s,v)}{\sigma(s, w)}
\times \left( 1 + \delta(s \vert w) \right) \right]
\end{align}</script>

<p>where $dist(s, t)$ denotes the minimum path length of point pair $(s, t)$.</p>

<p>The algorithm asserts that the dependency of a vertex $s$ on some $v$ can be compiled from dependencies on vertices <strong><em>one edge farther away</em></strong>. </p>

<p>Since $w$ is connected to $v$ and <strong>one edge farther away</strong> (which determined by <script type="math/tex">dist(s, w) = dist(s, v) + 1</script>) from $v$, so point $v$ is on the shortest paths of $(s, w)$ and the proportion of betweenness value that $v$ gains from edge $(v, w)$ equals to $\frac{\sigma(s,v)}{\sigma(s, w)} \times 1$; the other part of betweenness gain is from point $w$, that <script type="math/tex">\frac{\sigma(s,v)}{\sigma(s, w)} \times \delta(s \vert w)</script>, thus sum of the above two parts of betweenness gain is what exactly the equation demonstrates.</p>

<h4 id="references">References</h4>

<p>[1] Linton C. Freeman. A set of measures of centrality based on betweenness. Sociometry, 40(1):35–41, March 1977.</p>

<p>[2] Ulrik Brandes. On variants of shortest-path betweenness centrality and their generic computation. Social Networks, 30(2):136–145, May 2008.</p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Set of Measures of Centrality Based on Betweenness]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/04/28/studying-notes-a-set-of-measures-of-centrality-based-on-betweenness/"/>
    <updated>2013-04-28T23:49:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/04/28/studying-notes-a-set-of-measures-of-centrality-based-on-betweenness</id>
    <content type="html"><![CDATA[<p>This post is a studying notes of paper “A Set of Measures of Centrality Based on Betweenness”, the paper <a href="https://www.tribler.org/trac/raw-attachment/wiki/ReputationFunction/23.pdf">[pdf]</a>, wrote by Freeman in 1977, is an introductory and the most classic paper of <a href="http://en.wikipedia.org/wiki/Betweenness_centrality">betweenness centrality</a>. Based on the betweenness centrality concept first introduced by Bavelas in 1948, the paper introduces a set of measures of centrality, including point centrality, scale free (relative) point centrality, and graph centrality. </p>

<h4 id="betweenness-and-point-centrality">Betweenness and Point Centrality</h4>

<p>The classical centrality measures of Bavelas (1950) etc. can not be used by unconnected networks, since they define the centrality of a point as the sum of the minimum distance between that point and all others, thus all distance sums are infinite in unconnected networks.  </p>

<p>In order to obtain a more satisfactory solution per centrality measurements, Freeman adopts the betweenness concept first introduced by  Bavelas, betweenness of a point is “the degree to which a point falls on the shortest path between others”, and therefore has a potential per control of communication, persons in such central positions could influence the group by “ withholding information (or) coloring, or distorting it in transmission”.</p>

<h4 id="measurement-of-point-centrality">Measurement of Point Centrality</h4>
<p>Consider a unordered pair of  points {<script type="math/tex">p_i, p_j</script>} <script type="math/tex">(i \neq j)</script>. Either <script type="math/tex">p_i \text{ and } p_j</script> are unreachable from each other or  there are one or more paths between them. In the later case, each path has a length equals to the number of edges contained in it. Among the paths connecting pi and pj, one or more have the shortest length: the <strong>geodesics</strong>.</p>

<p>If $p_i$ and $p_j$ are unreachable from each other, then <script type="math/tex">b_{ij}(p_k)</script>, denotes betweenness centrality of point <script type="math/tex">p_k</script> with respect to <script type="math/tex">p_i</script> and <script type="math/tex">p_j</script>, is zero;</p>

<p>If <script type="math/tex">p_i</script> and <script type="math/tex">p_j</script> are <em>adjacent</em>, means that there is only one edge connecting them, since <script type="math/tex">p_k</script> does not reside on the shortest paths of <script type="math/tex">p_i</script> and <script type="math/tex">p_j</script>, <script type="math/tex">b_{ij}(p_k)</script> also equals to zero;</p>

<p>If <script type="math/tex">p_k</script> is on one or more shortest paths of <script type="math/tex">p_i</script> and <script type="math/tex">p_j</script>, in which situations, <script type="math/tex">p_k</script> has a proportional control of communication between <script type="math/tex">p_i</script> and <script type="math/tex">p_j</script>, and intuitively the proportion is the percentage/extent to which <script type="math/tex">p_k</script> is on the shortest paths, given the total shortest paths of <script type="math/tex">p_i</script> and <script type="math/tex">p_j</script> is <script type="math/tex">g_{ij}</script> and the number of <script type="math/tex">p_k</script> falls in the shortest paths is <script type="math/tex">g_{ij}(p_k)</script>, then we get <script type="math/tex">b_{ij}(p_k) = g_{ij}(p_k)/g_{ij}</script>. As the equation shows below:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
b_{ij}(p_k) = \begin{cases} 
0 & p_i \mbox{ and } p_j \mbox{ are unreachable or adjacent} \\ 
g_{ij}(p_k)/g_{ij} & \text{otherwise} 
\end{cases} %]]&gt;</script>

<p>To determine the overall centrality of <script type="math/tex">p_k</script> in the graph, we need merely to sum the partial betweenness value of all unordered pair of points {<script type="math/tex">p_i, p_j</script>} in the graph:</p>

<script type="math/tex; mode=display">\begin{align} C_B(p_k) = \sum\limits_{i}^n \sum\limits_{j}^n b_{ij}(p_k) \mbox{ where } i \lt j \mbox{ and } i,j \neq k  \end{align}</script>

<h4 id="scale-free-point-centrality">Scale-free Point Centrality</h4>

<p>One problem with the above point centrality is it not point independent/scale-free, it is related to how many points in the graph, thus comparing point centrality defined above with different graphs which may contain different amount of point is meaningless. A concreted example is pointed out that  6 betweenness value in 5 points graph compared with 6 betweenness value in 25 points graph, although they have the same betweenness centrality value but the influence of them is different.</p>

<p>In the later section Freeman introduced a relative point centrality, which is scale free to how many points in the graph, where point centrality <script type="math/tex">C'_B(p_k)</script> is divided by the maximum centrality of their graph.</p>

<script type="math/tex; mode=display">\begin{align} C'_B(p_k) = \dfrac{\sum\limits_{i}^n \sum\limits_{j}^n b_{ij}(p_k)} {\mbox{Max } C_B(p_k^*)} \end{align} </script>

<p>where <script type="math/tex">n</script> is the number of points in the graph, and <script type="math/tex">\begin{smallmatrix} \text{Max } C_B(p_k^*) \end{smallmatrix}</script> is only determined by n, which is <script type="math/tex">\begin{smallmatrix} \frac{n \times (n-1)}{2} - (n-1) = \frac{n^2 - 3n + 2}{2} \end{smallmatrix}</script>, therefore we obtain:</p>

<script type="math/tex; mode=display">\begin{align} C'_B(p_k) = \dfrac{2 \times \sum\limits_{i}^n \sum\limits_{j}^n b_{ij}(p_k)}{n^2 - 3n + 2} \end{align} </script>

<p>To get more information of how <script type="math/tex">\begin{smallmatrix} \text{Max } C_B(p_k^*) \end{smallmatrix}</script> is computed, please refer to the paper for details, you can imagine such a point that stands on the shortest path of all other pairs of {<script type="math/tex">p_i, p_j</script>}, where <script type="math/tex">p_i</script> and <script type="math/tex">p_j</script> have merely <strong>one</strong> shortest path, such a graph looks like a star graph, that one point in the central and all others surround it.</p>

<h4 id="graph-centrality">Graph Centrality</h4>

<p>Freeman defines the graph centrality as the average difference between the most central point and all others, which sounds like a little bit of <strong><em>information entropy</em></strong>, I think.</p>

<script type="math/tex; mode=display">\begin{align}
C'_B = \dfrac{\sum\limits_{i}^n \left( C'_B(p_k^*) - C'_B(p_k) \right)}{n - 1} 
\end{align}</script>

<p>where <script type="math/tex">\begin{smallmatrix} C'_B(p_k^*) \end{smallmatrix}</script> is the relative point centrality value of the most central point <script type="math/tex">p_k^*</script> in the graph.</p>

<p>From the equation, we can see if all the points have the same centrality value then the graph centrality is 0; and if the graph is a star or wheel graph, then graph centrality is 1.</p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Filter in Hadoop Mapper Class]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/04/21/adding-filter-in-hadoop-mapper-class/"/>
    <updated>2013-04-21T15:08:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/04/21/adding-filter-in-hadoop-mapper-class</id>
    <content type="html"><![CDATA[<p>There is my solutions to tackle the disk spaces shortage problem I described in the <a href="http://yoyzhou.github.io/blog/2013/04/20/my-first-luckily-and-sad-hadoop-results/">previous post</a>. The core principle of the solution is to reduce the number of output records at Mapper stage; the method I used is <strong>Filter</strong>, adding a filter, which I will explain later, to decrease the output records of Mapper, which in turn significantly decrease the Mapper’s Spill records, and fundamentally decrease the disk space usages. After applying the filter, with 30,661 records. some 200MB data set as inputs, the total Spill Records is 25,471,725,  and it <strong>only</strong> takes about 509MB disk spaces!</p>

<h4 id="followed-filter">Followed Filter</h4>

<p>And now I’m going to reveal what’s kinda Filter it looks like, and how did I accomplish that filter.
The true face of the <strong>FILTER</strong> is called  <strong>Followed Filter</strong>, it filters users from computing co-followed combinations if their followed number does not satisfy a certain number, called <strong>Followed Threshold</strong>. </p>

<p>Followed Filter is used to reduce the co-followed combinations at Mapper stage. Say we set the followed threshold to 100, meaning users who doesn’t own 100 fans(be followed by 100 other users) will be ignored during co-followed combinations computing stage(to get the actual number of the threshold we need analyze statistics of user’s followed number of our data set).</p>

<h4 id="reason">Reason</h4>

<p>Choosing followed filter is reasonable because how many user follows is a metric of user’s popularity/famousness.</p>

<h4 id="how">HOW</h4>

<p>In order to accomplish it, we need:</p>

<p><strong>First</strong>, counting user’s followed number among our data set, which needs a new MapReduce Job;</p>

<p><strong>Second</strong>, choosing a followed threshold after analyze the statistics perspective of followed number data set got in first step;</p>

<p><strong>Third</strong>, using DistrbutedCache of Hadoop to cache users who satisfy the filter to all Mappers;</p>

<p><strong>Forth</strong>, adding followed filter to Mapper class, only users satisfy filter condition will be passed into co-followed combination computing phrase;</p>

<p><strong>Fifth</strong>, adding co-followed filter/threshold in Reducer side if necessary.</p>

<h4 id="outcomes">Outcomes</h4>
<p>Here is the Hadoop Job Summary, after applying the followed filter with followed threshold of 1000, that means only users who are followed by 1000 users will have the opportunity to co-followed combinations, compared with the Job Summary in my previous post, most all metrics have significant improvements:</p>

<table>
  <tbody>
    <tr>
      <td>Counter</td>
      <td>Map</td>
      <td>Reduce</td>
      <td>Total</td>
    </tr>
    <tr>
      <td>Bytes Written</td>
      <td>0</td>
      <td>1,798,185</td>
      <td>1,798,185</td>
    </tr>
    <tr>
      <td>Bytes Read</td>
      <td>203,401,876</td>
      <td>0</td>
      <td>203,401,876</td>
    </tr>
    <tr>
      <td>FILE_BYTES_READ</td>
      <td>405,219,906</td>
      <td>52,107,486</td>
      <td>457,327,392</td>
    </tr>
    <tr>
      <td><strong><em>HDFS_BYTES_READ</em></strong></td>
      <td><strong><em>203,402,751</em></strong></td>
      <td>0</td>
      <td>203,402,751</td>
    </tr>
    <tr>
      <td><strong><em>FILE_BYTES_WRITTEN</em></strong></td>
      <td>457,707,759</td>
      <td>52,161,704</td>
      <td><strong><em>509,869,463</em></strong></td>
    </tr>
    <tr>
      <td>HDFS_BYTES_WRITTEN</td>
      <td>0</td>
      <td>1,798,185</td>
      <td>1,798,185</td>
    </tr>
    <tr>
      <td>Reduce input groups</td>
      <td>0</td>
      <td>373,680</td>
      <td>373,680</td>
    </tr>
    <tr>
      <td>Map output materialized bytes</td>
      <td>52,107,522</td>
      <td>0</td>
      <td>52,107,522</td>
    </tr>
    <tr>
      <td>Combine output records</td>
      <td>22,202,756</td>
      <td>0</td>
      <td>22,202,756</td>
    </tr>
    <tr>
      <td><strong><em>Map input records</em></strong></td>
      <td><strong><em>30,661</em></strong></td>
      <td>0</td>
      <td>30,661</td>
    </tr>
    <tr>
      <td>Reduce shuffle bytes</td>
      <td>0</td>
      <td>52,107,522</td>
      <td>52,107,522</td>
    </tr>
    <tr>
      <td>Physical memory (bytes) snapshot</td>
      <td>2,646,589,440</td>
      <td>116,408,320</td>
      <td>2,762,997,760</td>
    </tr>
    <tr>
      <td><strong><em>Reduce output records</em></strong></td>
      <td>0</td>
      <td><strong><em>373,680</em></strong></td>
      <td>373,680</td>
    </tr>
    <tr>
      <td><strong><em>Spilled Records</em></strong></td>
      <td><strong><em>22,866,351</em></strong></td>
      <td>2,605,374</td>
      <td>25,471,725</td>
    </tr>
    <tr>
      <td>Map output bytes</td>
      <td>2,115,139,050</td>
      <td>0</td>
      <td>2,115,139,050</td>
    </tr>
    <tr>
      <td>Total committed heap usage (bytes)</td>
      <td>2,813,853,696</td>
      <td>84,738,048</td>
      <td>2,898,591,744</td>
    </tr>
    <tr>
      <td>CPU time spent (ms)</td>
      <td>5,766,680</td>
      <td>11,210</td>
      <td>5,777,890</td>
    </tr>
    <tr>
      <td>Virtual memory (bytes) snapshot</td>
      <td>9,600,737,280</td>
      <td>1,375,002,624</td>
      <td>10,975,739,904</td>
    </tr>
    <tr>
      <td>SPLIT_RAW_BYTES</td>
      <td>875</td>
      <td>0</td>
      <td>875</td>
    </tr>
    <tr>
      <td><strong><em>Map output records</em></strong></td>
      <td><strong><em>117,507,725</em></strong></td>
      <td>0</td>
      <td>117,507,725</td>
    </tr>
    <tr>
      <td>Combine input records</td>
      <td>137,105,107</td>
      <td>0</td>
      <td>137,105,107</td>
    </tr>
    <tr>
      <td>Reduce input records</td>
      <td>0</td>
      <td>2,605,374</td>
      <td>2,605,374</td>
    </tr>
  </tbody>
</table>

<h4 id="ps">P.S.</h4>
<p>Frankly Speaking, chances are <strong>I am on the wrong way to Hadoop Programming</strong>, since I’m palying <code>Pesudo Distribution Hadoop</code> with my personal computer, which has 4 CUPs and 4G RAM, in real Hadoop Cluster disk spaces might never be a trouble, and all the tuning work I have done may turn into meaningless efforts. Before the Followed Filter, I also did some Hadoop tuning like customed Writable class, RawComparator, block size and io.sort.mb, etc.</p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Eclipse开发MapReduce程序的步骤]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/04/14/steps-of-programming-hadoop-with-eclipse/"/>
    <updated>2013-04-14T20:58:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/04/14/steps-of-programming-hadoop-with-eclipse</id>
    <content type="html"><![CDATA[<p>以下8个步骤是我在使用Eclipse开发MapReduce程序时的路线，假定读者已经配置好了Hadoop环境并且了解Eclipse的相关操作。</p>

<p>步骤<code>0～4</code>为在Eclipse中编写和调试MapReduce程序；步骤<code>5、6</code>为在伪分布模式下运行MapReduce程序，并且通过导出项目到指定目录实现了Eclipse项目与Hadoop的关联。</p>

<p>0 创建Java项目</p>

<p>1 在项目的CLASS PATH中添加<a href="http://hadoop.apache.org/">Hadoop</a>相关的JAR引用（注意在添加JAR文件，而不是JAR文件夹，要不然在4中会因为找不到JAR或者Class而报错）</p>

<blockquote>
  <p>如果你还下载了Hadoop的<a href="http://hadoop.apache.org/releases.html">源码</a>，也可以给Hadoop相关的JAR添加源码，这样在Eclipse就可以使用F3参看Hadoop源码）</p>
</blockquote>

<p>2 按照<a href="http://hadoop.apache.org/docs/r1.0.4/mapred_tutorial.html">MapReduce</a>类规范，编写自己的MapReduce类</p>

<p>3 配置MapReduce类的运行参数</p>

<p>4 在Eclipse中以单机模式运行/调试程序</p>

<p>5 将程序导出（Export）为JAR文件到$HADOOP_HOME/lib下</p>

<p>6 在伪分布模式下运行程序 bin/hadoop jar lib/ur-exported-jar.JAR full-class-name 参数列表</p>

<blockquote>
  <p>例如，你导出的JAR文件名为myhadoop.jar，类名称com.coolcompany.wordcount，命令就是：bin/hadoop jar lib/myhadoop.jar com.coolcompany.wordcount 参数列表</p>
</blockquote>

<p>7 部署程序到真实的Hadoop集群</p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop in Action学习笔记]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/04/14/hadoop-in-action-reading-note/"/>
    <updated>2013-04-14T15:41:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/04/14/hadoop-in-action-reading-note</id>
    <content type="html"><![CDATA[<h4 id="hadoop">第一章 Hadoop简介</h4>

<p>现今，互联网每天都产生海量的数据，现有工具对于TB、PB级别大规模分布式海量数据变得无力处理。</p>

<p>Google首先推出了处理大规模分布式数据的MapReduce计算范式，Doug Cutting领导开发了一个开源版的MapReduce，后来成为Hadoop。</p>

<h5 id="hadoop-1">什么是Hadoop</h5>

<p>Hadoop是一个开源框架，可编写和运行分布式应用处理大规模数据。一般认为Hadoop包含两个核心部分：HDFS，Hadoop分布式文件系统和MapReduce，一种分布式编程范式（分布式存储和分布式计算）。</p>

<pre><code>**优点：**
• 方便
• 健壮
• 线性可扩展
• 简单
</code></pre>

<h5 id="vs-">分布式系统  VS 大型单机服务器</h5>

<pre><code>向外扩展 VS  向上扩展

构建在一般/低端商用机器上，廉价

高端服务器，价格昂贵
</code></pre>

<h5 id="hadoopsetihome">Hadoop设计理念和SETI@Home的区别</h5>

<p>Hadoop设计用于数据密集型任务，遵循将程序向数据移动的设计哲学，即尽可能的保持数据不动，减少I/O的访问，程序文件的数量级相对于数据的数量级小得多</p>

<p>SETI@Home设计用于计算密集型任务，遵循将数据向计算资源（计算机）移动的设计哲学；因为数据传输量小，但是需要大量的计算资源（CPU时间）</p>

<h5 id="hadoopsql">Hadoop与SQL数据库的比较</h5>
<p>都是处理数据，SQL数据库用于处理结构化数据</p>

<p>Hadoop应用针对的是文本数据/可能是结构的也可能使非结构或者半结构化数据</p>

<p>1. 向外扩展 代替向上扩展</p>

<p>2. 用键/值对 代替关系表</p>

<p>3. 用函数式编程（MapReduce）代替申明式查询（SQL）</p>

<p>4. 用离线处理代替在线处理</p>

<p>数据密集型分布式应用中，数据传输的代价昂贵，应保持数据存储和处理紧密的绑定在一起。</p>

<h5 id="hadoop-2">Hadoop的历史</h5>
<p>2004年 Goole发表Google文件系统（GFS）和MapReduce框架</p>

<p>Doug Cutting将Nutch项目移植到GFS和MapReduce上，并设立了专门的项目充实这两种技术，于是就有了Hadoop</p>

<p>2006年 Yahoo聘用Doug Cutting，让他和一个专门团队一起改进Hadoop</p>

<p>2008年 Hahoop成为Apache的顶级项目</p>

<h4 id="hadoop-3">第二章 初识Hadoop</h4>

<p><strong>“运行Hadoop”意味着在不同服务器运行一组守护进程（daemons）:</strong></p>

<pre><code>0 NameNode (名字节点)
1 DataNode (数据节点)
2 Secondary NameNode (次名字节点)
3 JobTracker (作业跟踪节点)
4 TaskTracker (任务跟踪节点)
</code></pre>

<p>Hadoop在分布式计算和分布式存储中都采用了<strong>主/从(Master/Slaver)</strong>的结构</p>

<p>NameNode，JobTracker是Master节点</p>

<p>DataNode，TaskTracker和Slaver节点</p>

<h5 id="hadoop-4">运行Hadoop</h5>
<p>配置文件：core-site.xml, hdfs-site.xml和mapred-site.xml</p>

<p>conf/masters - master节点主机列表</p>

<p>conf/slaves - slave节点主机列表</p>

<p>运行的三种模式：本地（单机）模式，伪分布模式和全分布模式</p>

<pre><code>bin/hadoop namenode -format
bin/start-all.sh
jps
</code></pre>

<h5 id="web">基于WEB的管理界面</h5>
<p>NameNode状态界面： namenode-host:50070</p>

<p>JobTracker状态界面： jobtacker-host:50030</p>

<h4 id="hadoop-5">第三章 Hadoop组件</h4>

<p><strong>HDFS文件系统</strong></p>

<p>HDFS是一种文件系统，专为MapReduce这类框架下的大规模分布式处理而设计的</p>

<p>可以处理单个的大数据集（比如100TB），而大多数文件系统物理实现这点。</p>

<p><strong>？</strong>是不是说HDFS处理单个大数据集更加有效，而处理小文件的大量数据变现的不是很有优势，当然，如果这样也可以先把小文件组成大文件。</p>

<p><strong>？</strong>文件要多大才能适合HDFS/Hadoop的处理呢?</p>

<p>可不要为了数据大而大，数据应该在必要的清洗和预处理</p>

<h5 id="hadoop-6">Hadoop的基本文件命令</h5>

<p>hadoop fs -cmd &lt;args&gt;</p>

<p>HDFS中，默认的根目录是/user/$USER 其中USER是你登录系统的用户名</p>

<p>1. 添加文件和目录</p>

<p><code>hadoop fs -mkdir &lt;dir-name&gt;</code></p>

<p>将在/user/$USER目录下创建&lt;dir-name&gt;，如果&lt;dir-name&gt;包含多层目录且上层目录不存在，hadoop fs -mkdir会创建指定的多层目录结构。</p>

<p>如:</p>

<p><code>hadoop fs -mkdir inputs/dataset1 会创建/user/$USER/inputs/dataset1</code></p>

<p>2. 列举文件清单</p>

<p><code>hadoop fs -ls &lt;file-dir-name&gt;</code></p>

<p>和Unix系统ls本地文件类似</p>

<p><code>hadoop fs -lsr &lt;file-dir-name&gt;</code></p>

<p>查看所有文件和文件的子目录，递归的列出文件清单</p>

<p>3. 复制本地文件到HDFS </p>

<p><code>hadoop fs -put &lt;file-dir-name-to-put-in-hdfs&gt; &lt;file-dir-on-hdfs&gt;</code></p>

<p>4. 从HDFS上检索文件到本地系统</p>

<p><code>hadoop fs -get &lt;file-dir-on-hdfs-to-get&gt; &lt;file-dir-name-on-localhost&gt;</code></p>

<p>这是一个与hadoop fs -put相反的操作。</p>

<p>5. 查看HDFS上文件的内容</p>

<p><code>hadoop fs -cat &lt;file-name-to-cat&gt;</code></p>

<p>例如：</p>

<p><code>hadoop fs -cat example.txt</code></p>

<p>同样假设文件在默认的工作目录/user/$USER下</p>

<p>6. 删除文件/目录</p>

<p><code>hadoop fs -rm &lt;file-name-to-remove&gt;</code></p>

<p>例如：</p>

<p><code>hadoop fs -rm example.txt</code></p>

<p>这个命令用来删除文件，要删除文件夹是使用 -rmr 命令：</p>

<p><code>hadoop fs -rmr &lt;dir-name-to-remove&gt;</code></p>

<p>例如：</p>

<p><code>hadoop fs -rmr input</code></p>

<p>这里的<code>r</code>代表递归的删除文件。</p>

<p>7. 查看文件命令帮助</p>

<p><code>hadoop fs -help &lt;cmd&gt;</code></p>

<p>例如：</p>

<p><code>hadoop fs -help rmr</code></p>

<p>查看rmr命令的帮助文件</p>

<p>8. hadoop文件命令与Unix管道一起使用</p>

<p>例如：</p>

<p><code>hadoop fs -cat example.txt | head -n 20</code></p>

<h5 id="hadoop-7">Hadoop数据的读和写</h5>

<p>遵循并行处理数据分片原则的输入数据通常为单一的大文件。这也是Hadoop分布式文件系统的设计策略。</p>

<p>FSDataInputStream支持随机读取，这一特性涉及到MapReduce的数据分片机制。</p>

<p>随机读取，当一个任务失败时，恢复时不用从头读取文件，只需要从失败的位置进行恢复。</p>

<p><strong>InputFormat</strong></p>

<p>Hadoop分割与读取输入文件的方式在InputFormat接口中定义，TextInputFormat是InputFormat的默认实现。Hadoop提供的其他的InputFormat实现有：</p>

<p>KeyValueTextInputFormat，SequenceFileInputFormat和NLineInputFormat</p>

<p><strong>OutputFormat</strong></p>

<p>通过使用IntWritable类变量可以提高reduce()的性能，IntWritable类的处理性能要比Text高。</p>

<h4 id="mapreduce">第四章 编写MapReduce基础程序</h4>

<p><strong>mapper container partitioner reducer</strong> </p>

<h5 id="combiner">使用Combiner提升性能</h5>

<p>Combiner作用上与Reduce等价，起到聚合、结合作用，原则上程序必须没有Combiner也能够得到正确的结果</p>

<p>1. 网络洗牌时减少数据传输流量，考虑10亿条Mapper键值对的输出，如果没有Combiner会在网络洗牌过程中造成多大的流量</p>

<p>2. 数据分布不均匀时，造成大量Mapper的键值对输出跑向同一个Reducer</p>

<p>原理就是通过Combiner减少Mapper的输出数量以降低网络和Reducer上的压力，Combiner位于Mapper和Reducer中间，被视为是Reducer的助手，在数据转换上必须与Reducer等价，也就是如果我们去掉Combiner，Reducer的输出应该保持不变。</p>

<p>但是Combiner未必会提高性能，这要看Combiner是否能有效的减少Mapper输出记录的数量。</p>

<h4 id="mapreduce-1">第五章 高阶MapReduce</h4>

<h5 id="mapreduce-2">MapReduce之间的依赖</h5>

<p>Hadoop通过Job和JobControl类来管理作业之间的非线性依赖关系。</p>

<p>x.addDependingJob(y)</p>

<p>ChainMapper ChainReducer</p>

<p>链接MapReduce是，mapper、reducer之间的输入输出按照值传递还是引用传递的问题。P100</p>

<p>如果确保上游的Map/Reduce不是用其输出数据，或者下游Map/Reduce不改变上游的输出数据，可以使用by reference以提高一定的性能</p>

<h5 id="section">联结不同来源的数据</h5>

<p>1. Reduce侧的联结</p>

<p>repartitioned join 重分区联结</p>

<p>repartitioned sort-mergejoin 重分区排序-合并联结</p>

<p>结合DataJoin包使用钩子处理数据流P93</p>

<p>2. Mapper侧的联结P98</p>

<p><strong>DistributedCache 分布式缓存</strong></p>

<p>应用场景：一个数据源较大，另一个数据源可能小几个数量级，将较小的数据源装入内存，复制到所有的Mapper，在map阶段执行联结。通常小的数据源也叫做“背景数据”</p>

<h4 id="section-1">第六章 编程实践</h4>

<h5 id="section-2">本地模式</h5>

<p><strong>1 计算的完整性检查</strong></p>

<p>数学和逻辑错误在数据密集型程序中更加普遍，而它们往往并不明显！</p>

<p>数学计数或者算术如何检查正确性，在分布式计算中数学公式可能要重新设计，但是如何验证计算的完整性和准确性也就十分的重要。</p>

<p><strong>方法：</strong></p>

<p>可是通过宏观的查看一些指标，比如平均值，整体计数、最大值等来进行初步验证</p>

<p><strong>2 回归测试</strong></p>

<p>可能代价会很大，但是可以选取一部分数据集进行测试。所谓回归测试就是在同一数据集上比较代码修改前后算法的输出结果是否一致，如果每次回归测试的结果都是一样的，那么可以判定修改没有导致出现新的问题。</p>

<p><strong>3 考虑使用LONG而不是INT</strong></p>

<h5 id="section-3">伪分布模式</h5>
<p>1 日志</p>

<p>2 JOBTRACKER的WEB管理界面</p>

<p>3 杀掉作业</p>

<h5 id="section-4">生产集群上的监控与调试</h5>
<p>计数器 Reporter.incrCounter()</p>

<p>跳过坏记录 skipping模式的设置P126</p>

<p>用IsolationRunner重新运行出错的任务</p>

<h5 id="section-5">性能调优</h5>

<p><strong>Hadoop的线性可扩展性</strong></p>

<h6 id="combiner-1">1 通过combiner来减少网络流量</h6>

<h6 id="section-6">2 减少输入数据</h6>
<pre><code>a. 采样数据，只处理数据的子集
b. “重构”数据，仅使用需要的字段（要求开发人员清楚的了解数据和自己的业务需求）
#上面两个方案一个是**横切**一个是**纵切**，都是减少输入数据的方法
</code></pre>

<h6 id="section-7">3 使用压缩</h6>

<p>即使使用了combiner，在map阶段的输出也可能很大。这些中间数据必须被存储在磁盘上，并在网络上重排。压缩这些中间数据会提高大多数MapReduce作业的性能。Hadoop内置支持压缩和解压缩。</p>

<pre><code>压缩的参数配置P130
mapred.compress.map.output
mapred.map.output.compression.codec
SequenceFIleOutputFormat 序列文件输出
</code></pre>

<h6 id="jvm">4 重用JVM</h6>

<p>mapred.job.reuse.jvm.num.task 指定一个JVM可以运行的最大任务数</p>

<h6 id="section-8">5 根据猜测执行来运行</h6>

<p>在所有的mapper完成之前，reducer都不会启动；类似的，在所有的reducer完成之前，一个作业也不会结束。</p>

<p><strong>问题：当其中一个任务变慢时（注意不是失效），MapReduce如何处理？</strong></p>

<p>Hadoop会注意到运行速度缓慢的任务，并安排在另一个节点上并行执行相同的任务。</p>

<pre><code>**参数：**

mapred.map.tasks.speculative.execution
mapred.reduce.tasks.speculative.execution
</code></pre>

<h6 id="section-9">6 代码重构与算法重写</h6>

<p>6.1 将Streaming程序重写为Java程序</p>

<p>6.2 在一次作业中集中一次处理类似的任务，而不是每一个任务都启动一个作业，比如计算最大值、最小值和均值等在同一数据集上的计算可以在一个Job中完成，而不要分为不同的Job</p>

<p>6.3 设计特定的新的适合MapReduce框架的算法</p>

<h4 id="section-10">第七章 细则手册</h4>

<h5 id="section-11">7.1 向任务传递作业定制的参数</h5>

<p>在JobConf中定制自己的参数，在所有的Task中都能读取到。</p>

<h5 id="section-12">7.2 探查任务特定信息</h5>

<h5 id="section-13">7.3 划分为多个输出文件</h5>
<p>MultipleOutputFormat 键/值区分，写入不同的文件， 一个Collector 不同文件名</p>

<p>MultipleOutputs	属性区分，写入不同的文件，多个Collector写文件</p>

<h5 id="section-14">7.4 以数据库作为输入输出</h5>
<p><strong>DBOutputFormat</strong></p>

<h5 id="section-15">7.5 保持输出的顺序</h5>

<h4 id="hadoop-8">第八章 管理Hadoop</h4>

<h5 id="section-16">8.1 为实际应用设置特定参数值</h5>

<h5 id="section-17">8.2 系统体检</h5>
<pre><code>bin/hadoop fsck &lt;path&gt; #file system check
bin/hadoop dfsadmin -report
</code></pre>

<h5 id="section-18">8.3 权限设置</h5>

<h5 id="section-19">8.4 配额管理</h5>
<pre><code>bin/hadoop dfsadmin -setQuota &lt;N&gt; dir
bin/hadoop dfsadmin -setSpaceQuota &lt;N&gt; dir
bin/hadoop fs -count -q dir #显示目录的配额
</code></pre>

<h5 id="section-20">8.5 启动回收站</h5>

<p>fs.trash.interval属性（以分钟为单位）</p>

<h5 id="datanode">8.6 删减DataNode</h5>

<pre><code>dfs.hosts.exclude=file-point-to-exclude-host-list
bin/hadoop dfsadmin -refreshNodes
</code></pre>

<h5 id="datanode-1">8.7 增加DataNode</h5>

<h5 id="namenodesnn">8.8 管理NameNode和SNN</h5>
<p>减轻NameNode负担的一种方法是增加数据块的大小，以降低文件系统中元数据的数据量，dfs.block.size 默认64M</p>

<h6 id="snn">SNN是做什么的？</h6>
<p>取了一个不妥的名字。首先并不是NameNode的失效备份</p>

<p>把SNN视为一个检查点服务器更为合适，用于合并下面两个文件以形成系统快照。</p>

<pre><code>可能在0.21中被弃用
FsImage
EditLog
</code></pre>

<h5 id="namenode">8.9 恢复失效的NameNode</h5>
<p>备份NameNode的元数据文件（dfs.name.dir）到SNN节点，或者其他多个节点。</p>

<h5 id="section-21">8.10 感知网络布局和机架的设计</h5>
<p><strong>DataNode数据块的副本策略</strong>
标准副本为3个：</p>

<p>第1个 在同一个DataNode上</p>

<p>第2个 不同的机架上的DataNode上</p>

<p>第3个 与第二个同机架的不同DataNode上</p>

<p>如果大于3个副本，其他的随机放置的不同节点上</p>

<p>topology.script.file.name</p>

<p>机架感知，配置Hadoop是NameNode知道DataNode的机架分布结构</p>

<h5 id="section-22">8.11 多用户作业调度</h5>
<p>8.11.1 多个JobTracker</p>

<p>8.11.2 公平调度器 （Facebook）</p>

<h4 id="hadoop-9">第九章 在云上运行Hadoop</h4>
<p><strong>租用 经济</strong>
Amazon Web Services(AWS)</p>

<p>Elastic Compute Clous(EC2) 弹性计算云</p>

<p>Simple Storage Service(S3)简单存储服务</p>

<p>1 AWS与外部网络通信的带宽需要收取费用，EC2内部不需要收费。</p>

<p>2 先存储在S3 在从S3中复制到主节点</p>

<p>S3中存储数据同样要收费 但是 存储空间可扩展、一次存储可以多次使用、资费相对低、S3和EC2是内部网，之间复制数据没有费用且速度快</p>

<p>3 还可以直接将S3作为输入输出文件地址，而不用复制数据到HDFS</p>

<h4 id="pignot-finished">第十章 用Pig编程（Not Finished）</h4>
<p>Pig是架构在Hadoop之上的高级数据处理层。</p>

<p><strong>易用性、高性能、大规模可扩展能力</strong>是所有Hadoop子项目的期望</p>

<p><strong>“Pig吃任何东西”</strong></p>

<p>Pig Latin命令运行： Grunt Shell、脚本文件、嵌入在Java程序中。</p>

<h4 id="hivehadoop">第十一章 Hive及Hadoop群</h4>
<p>Pig——一种高级数据流语言</p>

<p>Hive——一种类SQL数据仓库基础设施</p>

<p>HBase——一种模仿Google BigTable的分布式的、面向列的数据库</p>

<p>ZooKeeper——一种用于管理分布式应用之间共享状态的可靠的协同系统</p>

<p>Cascading——是Hadoop上用于组装和执行复杂数据处理工作流的一个API</p>

<p>Hama——矩阵计算软件包，用于计算乘积、逆、特征值、特征向量和其他矩阵运算</p>

<p>Mahout——基于Hadoop实现机器学习算法</p>

<h5 id="hive">Hive</h5>
<p>Hive是建立在Haddop基础之上的数据仓库软件包</p>

<p>HiveQL——类SQL的数据查询语言</p>

<p>MetaStore ——用于存放元数据的组件，存储在Derby关系数据库中（存取速度的考虑）</p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于UID的WEIBO信息抓取框架WEIBO_SCRAPY]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/04/08/weibo-scrapy-framework-with-multi-threading/"/>
    <updated>2013-04-08T20:55:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/04/08/weibo-scrapy-framework-with-multi-threading</id>
    <content type="html"><![CDATA[<p>本文介绍基于微博UID的SINA微博信息抓取框架WEIBO_SCRAPY。 WEIBO_SCRAPY是一个PYTHON实现的，使用多线程抓取WEIBO信息的框架。WEIBO_SCRAPY框架给用户提供WEIBO的模拟登录和多线程抓取微博信息的接口，让用户只需关心抓取的业务逻辑，而不用处理棘手的WEIBO模拟登录和多线程编程。</p>

<h3 id="weiboscrapy">WEIBO_SCRAPY</h3>
<p>WEIBO_SCRAPY是一个PYTHON实现的，使用基于微博UID的方式从WEIBO.COM页面抓取信息的框架。框架以微博UID为最小单位，为每一个UID分配一个抓取线程，因此每一个UID相当于一个<strong>抓取任务</strong>。WEIBO_SCRAPY内置微博模拟登录和多线程框架，让用户只需关注以微博UID为基础的抓取业务逻辑。具体的说，使用WEIBO_SCRAPY用户只需要重载WEIBO_SCRAPY的<strong>抓取任务</strong>方法为自己的抓取逻辑，即可实现多线程地抓取微博信息（详见下文<code>WEIBO_SCRAPY的实现</code>小节）。</p>

<h3 id="weiboscrapy-1">WEIBO_SCRAPY的功能</h3>
<p>1. 微博模拟登录</p>

<p>2. 多线程抓取框架</p>

<p>3. <strong>抓取任务</strong>接口</p>

<p>4. 抓取参数配置</p>

<h3 id="weiboscrapy-2">WEIBO_SCRAPY的实现</h3>

<h4 id="section">1 微博模拟登录</h4>
<p>请参考拙文<a href="http://yoyzhou.github.io/blog/2013/03/18/sina-weibo-login-simulator-in-python/">Python模拟登录新浪微薄（使用RSA加密方式和Cookies文件）</a></p>

<h4 id="section-1">2 多线程抓取框架</h4>
<p>WEIBO_SCRAPY使用<a href="http://docs.python.org/2/library/queue.html">Queue</a>实现多线程抓取框架，Queue中的元素为微博用户的UID，每一个抓取线程消费Queue中的UID，抓取线程在获得UID之后交给<strong>抓取任务</strong>处理该UID。框架实现<code>从某一个UID开始</code>和<code>从文件中加载UID列表</code>两种抓取方式，无论何种方式都有可能返回在抓取过程中新获得的UID(通过解析抓取的页面获得)，并加入到Queue中，对于从单一某个UID开始的方式，返回新获得的UID是推荐的做法，不然Queue中就只有开始UID一个抓取任务。</p>

<blockquote>
  <p>The Queue module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads. </p>
</blockquote>

<p>关于更多Python多线程编程的知识，请参考拙文<a href="http://yoyzhou.github.io/blog/2013/02/28/python-threads-synchronization-locks/">Python线程同步机制: Locks, RLocks, Semaphores, Conditions, Events和Queues</a></p>

<p>以下是WEIBO_SCRAPY多线程框架的实现代码，分别是抓取线程和抓取的主进程，在第二段代码中抓取的主进程生成用户指定数目的抓取进行执行抓取任务：</p>

<p>抓取线程</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">scrapy_threading</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;Thread class to handle scrapy task&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task</span><span class="p">,</span> <span class="n">wanted</span><span class="p">):</span>
</span><span class="line">        <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">do_task</span> <span class="o">=</span> <span class="n">task</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">wanted</span> <span class="o">=</span> <span class="n">wanted</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">global</span> <span class="n">visited_uids</span>
</span><span class="line">        <span class="k">global</span> <span class="n">task_queue</span>
</span><span class="line">        <span class="k">global</span> <span class="n">scraped</span>
</span><span class="line">        <span class="k">global</span> <span class="n">lock</span>
</span><span class="line">
</span><span class="line">        <span class="k">while</span> <span class="n">scraped</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">wanted</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">            <span class="c">#crawl info based on each uid</span>
</span><span class="line">            <span class="k">if</span> <span class="n">task_queue</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">                <span class="n">uid</span> <span class="o">=</span> <span class="n">task_queue</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">                <span class="k">if</span> <span class="n">uid</span> <span class="ow">in</span> <span class="n">visited_uids</span><span class="p">:</span> <span class="c">#already crawled</span>
</span><span class="line">                    <span class="n">task_queue</span><span class="o">.</span><span class="n">task_done</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="k">try</span><span class="p">:</span>
</span><span class="line">                        <span class="n">gains</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">do_task</span><span class="p">(</span><span class="n">uid</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">                        <span class="c">#per debug</span>
</span><span class="line">                        <span class="n">wow</span> <span class="o">=</span> <span class="s">&#39;{0: &lt;25}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s">&#39;[&#39;</span> <span class="o">+</span> <span class="n">time</span><span class="o">.</span><span class="n">asctime</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#39;] &#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; uid_&#39;</span> <span class="o">+</span> <span class="s">&#39;{0: &lt;12}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">uid</span><span class="p">)</span>
</span><span class="line">                        <span class="k">print</span> <span class="n">wow</span>
</span><span class="line">                        <span class="k">for</span> <span class="n">uid</span> <span class="ow">in</span> <span class="n">gains</span><span class="p">:</span>
</span><span class="line">                            <span class="n">task_queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">uid</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">                        <span class="c">#signals that queue job is done</span>
</span><span class="line">                        <span class="n">task_queue</span><span class="o">.</span><span class="n">task_done</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">                        <span class="c">#counting scrapied number</span>
</span><span class="line">                        <span class="k">with</span> <span class="n">lock</span><span class="p">:</span>
</span><span class="line">                            <span class="n">scraped</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">                            <span class="c">#per debug</span>
</span><span class="line">                            <span class="k">print</span> <span class="s">&#39;scraped: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">scraped</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">                    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class="line">                        <span class="k">print</span> <span class="n">e</span>
</span><span class="line">                        <span class="k">pass</span>
</span><span class="line">
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>抓取的主进程</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">scrapy</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">        <span class="n">login_status</span> <span class="o">=</span> <span class="n">login</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">login_username</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">login_password</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">cookies_file</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="n">login_status</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">start_uid</span><span class="p">:</span>
</span><span class="line">                <span class="n">task_queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">start_uid</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">uids_file</span><span class="p">:</span>
</span><span class="line">                <span class="n">uids_list</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__load_uids__</span><span class="p">()</span>
</span><span class="line">                <span class="k">for</span> <span class="n">uid</span> <span class="ow">in</span> <span class="n">uids_list</span><span class="p">:</span>
</span><span class="line">                    <span class="n">task_queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">uid</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">            <span class="k">else</span><span class="p">:</span> <span class="c">#start uid or uids file is needed</span>
</span><span class="line">                <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;ERROR: Start uid or uids file is needed.&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">            <span class="c">#spawn a pool of threads, and pass them queue instance </span>
</span><span class="line">            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">thread_number</span><span class="p">):</span>
</span><span class="line">                <span class="n">st</span> <span class="o">=</span> <span class="n">scrapy_threading</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">scrapy_do_task</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">wanted</span><span class="p">)</span>
</span><span class="line">                <span class="n">st</span><span class="o">.</span><span class="n">setDaemon</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line">                <span class="n">st</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">            <span class="n">task_queue</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">3 抓取任务接口</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">  <span class="k">def</span> <span class="nf">scrapy_do_task</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">uid</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">        User needs to overwrite this method to perform uid-based scrapy task.</span>
</span><span class="line"><span class="sd">        @param uid: weibo uid</span>
</span><span class="line"><span class="sd">        @return: a list of uids gained from this task, optional</span>
</span><span class="line"><span class="sd">        &#39;&#39;&#39;</span>
</span><span class="line">        <span class="c">#return []</span>
</span><span class="line">        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>以上是抓取任务的接口，WEIBO_SCRAPY暴露scrapy_do_task方法，用户只需要继承WEIBO_SCRAPY的scrapy类并且重写scrapy_do_task方法为自己的抓取业务逻辑。
像前面提到过的一样，抓取任务是基于微博用户的UID的，所以scrapy_do_task方法有一个uid参数。</p>

<h4 id="section-3">4 抓取参数配置</h4>
<p>WEIBO_SCRAPY提供简单易用的账户信息配置和抓取参数配置，在<code>scrapy.ini</code>文件中即可轻松的完成参数的配置，以下是一个配置文件的样本：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">[</span><span class="n">login_account_info</span><span class="p">]</span>
</span><span class="line"><span class="c">#account info for logining weibo </span>
</span><span class="line"><span class="n">login_username</span> <span class="o">=</span> <span class="n">ur_login_account_name_here</span>
</span><span class="line"><span class="n">login_uid</span> <span class="o">=</span> <span class="n">weibo_uid_of_login_account_here</span>
</span><span class="line"><span class="n">login_password</span> <span class="o">=</span> <span class="n">account_password_here</span>
</span><span class="line"><span class="n">cookies_file</span> <span class="o">=</span> <span class="n">weibo_cookies</span><span class="o">.</span><span class="n">dat</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">scrapy_settings</span><span class="p">]</span>
</span><span class="line"><span class="n">thread_number</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class="line"><span class="n">wanted</span> <span class="o">=</span> <span class="mi">100000</span>
</span><span class="line"><span class="c">#only one property of below 2 is required, and start_uid takes advantage of uids_file</span>
</span><span class="line"><span class="c">#also note that arguments from constructor will overwrite this two properties </span>
</span><span class="line"><span class="n">start_uid</span> <span class="o">=</span> <span class="mi">1197161814</span>
</span><span class="line"><span class="n">uids_file</span> <span class="o">=</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用户也可以在scrapy类的构造器中指定配置文件的位置。</p>

<h3 id="weiboscrapy-3">WEIBO_SCRAPY的使用</h3>
<p>使用WEIBO_SCRAPY用户只需要继承WEIBO_SCRAPY的scrapy类并且重写scrapy_do_task方法为自己的抓取业务逻辑。</p>

<p>以下示例代码可在<a href="https://github.com/yoyzhou/weibo_scrapy/blob/master/example.py">weibo_scrapy/example.py</a>中找到。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c">#coding=utf8</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">weibo_scrapy</span> <span class="kn">import</span> <span class="n">scrapy</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">my_scrapy</span><span class="p">(</span><span class="n">scrapy</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">scrapy_do_task</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">uid</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">         <span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">        User needs to overwrite this method to perform uid-based scrapy task.</span>
</span><span class="line"><span class="sd">        @param uid: weibo uid</span>
</span><span class="line"><span class="sd">        @return: a list of uids gained from this task, optional</span>
</span><span class="line"><span class="sd">        &#39;&#39;&#39;</span>
</span><span class="line">         <span class="nb">super</span><span class="p">(</span><span class="n">my_scrapy</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">**</span><span class="n">kwds</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">         <span class="c">#do what you want with uid here, note that this scrapy is uid based, so make sure there are uids in task queue, </span>
</span><span class="line">         <span class="c">#or gain new uids from this function</span>
</span><span class="line">         <span class="k">print</span> <span class="s">&#39;WOW...&#39;</span>
</span><span class="line">         <span class="k">return</span> <span class="s">&#39;replace this string with uid list which gained from this task&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="n">my_scrapy</span><span class="p">(</span><span class="n">start_uid</span> <span class="o">=</span> <span class="s">&#39;1197161814&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">s</span><span class="o">.</span><span class="n">scrapy</span><span class="p">()</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">项目源代码</h3>
<p>WEIBO_SCRAPY项目的源代码地址：<a href="https://github.com/yoyzhou/weibo_scrapy">weibo_scrapy</a>，<a href="https://github.com/yoyzhou/weibo_scrapy/fork">Fork it</a>。</p>

<h3 id="section-5">相关阅读</h3>
<p>1. <a href="http://yoyzhou.github.io/blog/2013/03/18/sina-weibo-login-simulator-in-python/">Python模拟登录新浪微薄（使用RSA加密方式和Cookies文件）</a></p>

<p>2. <a href="http://yoyzhou.github.io/blog/2013/03/23/extract-data-with-beautifulsoup-taking-weibo-4-example/">使用Beautiful Soup抽取网页数据，解析微博用户关注信息</a></p>

<p><code>---EOF---</code></p>

<!-- PUT reference-style links below-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Beautiful Soup抽取网页数据，解析微博用户关注信息]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/03/23/extract-data-with-beautifulsoup-taking-weibo-4-example/"/>
    <updated>2013-03-23T17:14:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/03/23/extract-data-with-beautifulsoup-taking-weibo-4-example</id>
    <content type="html"><![CDATA[<p>本文介绍了Beautiful Soup，PYTHON实现的HTML/XML标记的解析器；简要描述了Beautiful Soup的安装以及使用；最后以抽取微博用户关注信息为例详细的演示了如何使用Beautiful Soup。</p>

<h3 id="beautiful-soup">什么是Beautiful Soup</h3>
<p><a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a>是用PYTHON实现的HTML/XML标记的解析器。它提供简单和通用的方法对HTML/XML语法树进行浏览（navigating），搜索（searching）以及修改（searching）。它甚至可以针对不规范的标记生成语法树，可以大大地减少开发人员的时间。</p>

<blockquote>
  <p>Beautiful Soup is an HTML/XML parser for Python that can turn even invalid markup into a parse tree. It provides simple, idiomatic ways of navigating, searching, and modifying the parse tree. It commonly saves programmers hours or days of work. <cite><a href="http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html">Beautiful Soup</a></cite></p>
</blockquote>

<h3 id="beautiful-soup-1">安装Beautiful Soup</h3>
<p>安装Beautiful Soup很简单，如果你已经安装过pip或者easy_install,如果您还没有安装过Python安装工具，建议您参考<a href="http://yoyzhou.github.io/blog/2012/08/12/install-python-setuptools-slash-distribute-for-both-python2-and-python3/">Install Python Setuptools/Distribute for Python2 and Python3</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo easy_install beautifulsoup4
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>需要注意的是：BeautifulSoup4支持Python 2.x和3.x，而BeautifulSoup3只支持Python 2.x，Beautiful Soup官网建议大家应该使用BeautifulSoup4而不是BeautifulSoup3。</p>

<blockquote>
  <p>Beautiful Soup 3 only works on Python 2.x, but Beautiful Soup 4 also works on Python 3.x. Beautiful Soup 4 is faster, has more features, and works with third-party parsers like lxml and html5lib. You should use Beautiful Soup 4 for all new projects.</p>
</blockquote>

<h3 id="beautiful-soup-2">使用Beautiful Soup</h3>
<p>首先，导入Beautiful Soup。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意如果你使用的是BeautifulSoup3，那么导入语句可能是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">BeautifulSoup</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后，使用BeautifulSoup为你生成标记语言的语法树。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;my.html&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>得到了语法树soup之后，就可以调用相应的接口浏览，搜索和修改你的标记文件。比如下面的语句搜索my.html中所有’action-type’是’user_item’的div：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">soup</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;div&#39;</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;action-type&#39;</span> <span class="p">:</span> <span class="s">&#39;user_item&#39;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面简单介绍了Beautiful Soup的安装和使用，更多Beautiful Soup的文档请参考官方文档<a href="http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html">bs3</a>和<a href="http://www.crummy.com/software/BeautifulSoup/">bs4</a>。下面我们以从WEIBO.COM页面中解析出用户的关注信息为例，介绍Beautiful Soup的使用。</p>

<h3 id="beautiful-soup-3">Beautiful Soup实例：解析微博用户的关注信息</h3>
<p>社交网络中的关注信息（followings）是用户对什么人/东西感兴趣的一种表达，从关注信息中可以得到用户的兴趣偏好，又因为关注信息有用户自己维护，所以相对于粉丝（followers）信息更能体现个人偏好。以微博来说，关注就是用户关注的人，一般认为用户是根据自己的兴趣爱好出发有选择的关注帐号。</p>

<p>微博中有两种关注，我的关注和他人的关注，由于这两种关注的页面结构不同，所以在解析的时候需要分别对待，但是分析的过程是同理的，只是在抽取数据是的页面标签不一样，使用上面的Beautiful Soup工具，抽取时标签的定位会很容易，这就是使用Beautiful Soup带来的好处。</p>

<h4 id="inspect-element">1.使用浏览器的<code>Inspect Element</code>功能理解页面的结构</h4>

<p>最新版的Chrome和Firefox都自身内置有<code>Inspect Element</code>功能，在编写代码时，可能要经常的使用它来定位要寻找的页面元素。Chrome浏览器<code>Inspect Element</code>的使用请参考<a href="https://developers.google.com/chrome-developer-tools/docs/elements">Chrome Developer Tools - Elements Panel</a>。
<!-- more --></p>

<h4 id="htmlbeautiful-soup">2.从页面中提取用户关注的HTML字段，构建Beautiful Soup对象</h4>

<p>通过上面一步的分析，我们大致了解用户关注列表的页面结构，接下来就把页面文件/流导入到Beautiful Soup中，让它为我们生成页面结构树。可是当我们查看新浪微博页面源码的时候，情况却不是这样的，我们发现页面源码中很多信息并不是以HTML元素的形式呈现，而是以plain文本形式放到了页面的Javacript脚本里面，这时就更加凸显了Beautiful Soup的伟大之处了，只要我们在Script里面找到了相应的代码（实际上是json格式存放的数据），抽取出来再导入到Beautiful Soup中，这个问题也就迎刃而解。下面的正则表达式用来从页面中提取Script中的json数据并且使用其中的HTML字段生成soup：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">parse_followings</span><span class="p">(</span><span class="n">page_content</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">    @param page_content: html page file or response stream from Internet</span>
</span><span class="line"><span class="sd">    &#39;&#39;&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="c">#reguler expression to extract json data which contains html info</span>
</span><span class="line">    <span class="n">patt_view</span> <span class="o">=</span> <span class="s">&#39;&lt;script&gt;STK &amp;&amp; STK.pageletM &amp;&amp; STK.pageletM.view\((.*)\)&lt;/script&gt;&#39;</span>
</span><span class="line">    <span class="n">patt</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">patt_view</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">MULTILINE</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">weibo_scripts</span> <span class="o">=</span> <span class="n">patt</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">page_content</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">script</span> <span class="ow">in</span> <span class="n">weibo_scripts</span><span class="p">:</span>
</span><span class="line">	<span class="n">view_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">script</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="s">&#39;html&#39;</span> <span class="ow">in</span> <span class="n">view_json</span> <span class="ow">and</span> <span class="n">view_json</span><span class="p">[</span><span class="s">&#39;pid&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;pl_relation_hisFollow&#39;</span><span class="p">:</span>
</span><span class="line">            <span class="n">html</span> <span class="o">=</span> <span class="n">view_json</span><span class="p">[</span><span class="s">&#39;html&#39;</span><span class="p">]</span>
</span><span class="line">            <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>	<span class="c">#WOW...we got the soup</span>
</span><span class="line">		
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="beautiful-soup-4">3.通过Beautiful Soup获取需要的页面元素，并从中抽取感兴趣的信息</h4>

<p>通过上一步获得following的HTML信息，导入到Beautiful Soup中，接下来就使用Beautiful Soup抽取信息了。如何去定位元素当然有很多方式，结合<code>Inspect Element</code>,可以很容易的做到，获得元素之后就可以抽取需要的信息了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">	
</span><span class="line"><span class="c">#all the followings, search according element type(li) and attributes</span>
</span><span class="line"><span class="n">friendollowings</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;li&#39;</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span><span class="s">&#39;clearfix S_line1&#39;</span><span class="p">,</span> <span class="s">&#39;action-type&#39;</span> <span class="p">:</span> <span class="s">&#39;itemClick&#39;</span><span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">user_item</span> <span class="ow">in</span> <span class="n">friendollowings</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">    <span class="n">action_data</span> <span class="o">=</span> <span class="n">user_item</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;action-data&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">user_info</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">action_data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;&amp;&quot;</span><span class="p">):</span>
</span><span class="line">        <span class="n">field_name</span><span class="p">,</span> <span class="n">field_value</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;=&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">user_info</span><span class="p">[</span><span class="n">field_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">field_value</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">for</span>  <span class="n">info</span> <span class="ow">in</span>  <span class="p">[</span><span class="n">more</span> <span class="k">for</span> <span class="n">more</span> <span class="ow">in</span> <span class="n">user_item</span><span class="p">(</span><span class="s">&#39;div&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">more</span><span class="p">,</span> <span class="n">Tag</span><span class="p">)]:</span>
</span><span class="line">        <span class="n">class_name</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="s">&#39;class&#39;</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="n">class_name</span> <span class="o">==</span> <span class="s">&#39;name&#39;</span><span class="p">:</span>
</span><span class="line">            <span class="n">user_info</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">clean_content</span><span class="p">(</span><span class="n">info</span><span class="o">.</span><span class="n">a</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class="line">            <span class="n">user_info</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">clean_content</span><span class="p">(</span><span class="n">info</span><span class="o">.</span><span class="n">span</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">class_name</span> <span class="o">==</span> <span class="s">&#39;connect&#39;</span><span class="p">:</span>
</span><span class="line">            <span class="n">user_info</span><span class="p">[</span><span class="s">&#39;connect&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">clean_content</span><span class="p">(</span><span class="n">info</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">class_name</span> <span class="o">==</span> <span class="s">&#39;face mbspace&#39;</span><span class="p">:</span> <span class="c">#face image</span>
</span><span class="line">            <span class="n">user_info</span><span class="p">[</span><span class="s">&#39;face&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="n">a</span><span class="o">.</span><span class="n">img</span><span class="p">[</span><span class="s">&#39;src&#39;</span><span class="p">]</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">class_name</span> <span class="o">==</span> <span class="s">&#39;weibo&#39;</span><span class="p">:</span>
</span><span class="line">            <span class="k">pass</span>
</span><span class="line">            <span class="c">#user_info[&#39;lasttweet&#39;] = clean_content(info.text)</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">结束语</h3>
<p>文中阐述了如何使用Beautiful Soup抽取微博页面的用户关注信息，最后有几点需要提出：
1.模拟用户登录</p>

<p>结合本人的上一篇文章<a href="http://yoyzhou.github.io/blog/2013/03/18/sina-weibo-login-simulator-in-python/">Python模拟登录新浪微博（使用RSA加密方式和Cookies文件）</a>，可以实现模拟用户登录之后发送用户关注的URL请求<code>http://weibo.com/{uid}/follow</code>获得用户关注的页面；</p>

<p>2.分页抽取</p>

<p>解析页面<code>http://weibo.com/{uid}/follow</code>可以获取用户关注的总页面数，通过<code>http://weibo.com/{uid}/follow?page={page_num}</code>可以实现分页抽取。</p>

<h3 id="section-1">相关阅读</h3>

<p>1. <a href="http://yoyzhou.github.io/blog/2013/03/18/sina-weibo-login-simulator-in-python/">Python模拟登录新浪微薄（使用RSA加密方式和Cookies文件）</a>,使用RSA2加密方式模拟登录SINA微博。</p>

<p>2. <a href="http://yoyzhou.github.io/blog/2013/04/08/weibo-scrapy-framework-with-multi-threading/">基于UID的WEIBO信息抓取框架WEIBO_SCRAPY</a>，详细介绍了多线程WEIBO数据抓取框架WEIBO_SCRAPY。</p>

<p><code>---EOF---</code></p>

<!-- PUT reference-style links below-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python模拟登录新浪微薄（使用RSA加密方式和Cookies文件）]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/03/18/sina-weibo-login-simulator-in-python/"/>
    <updated>2013-03-18T21:15:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/03/18/sina-weibo-login-simulator-in-python</id>
    <content type="html"><![CDATA[<p>本文简单介绍如何使用<a href="http://www.python.org/">PYTHON</a>模拟用户登录新浪微薄,文中使用的代码可以在<a href="https://github.com/yoyzhou/weibo_login">github.com/yoyzhou/weibo_login</a>中找到。</p>

<h3 id="section">为什么要模拟登录</h3>
<p>一般来说获取微薄数据的方式有两种，一种是使用WEIBO官方提供的API接口；另外一种方式就是从WEIBO网站页面上抓取数据。从网面上抓取数据，相对于使用WEIBO API更加灵活，可控性更强，不用受WEIBO API调用次数的限制；但是易受WEIBO页面结构变动的影响，使得程序可靠性低，不适合在生产系统中使用。</p>

<blockquote>
  <p>当然还有一种是由<strong>别人</strong>提供下载的，下载WEIBO数据可以考虑<a href="http://www.cnpameng.com/">爬盟中国</a>和<a href="http://www.datatang.com/">数据堂</a></p>
</blockquote>

<p>本文要讲的内容跟页面抓取数据有关，但是像<a href="weibo.com">WEIBO.COM</a>这样的<a href="http://en.wikipedia.org/wiki/SNS">SNS</a>网站必须事先登录之后才能访问到她的数据，所以如何模拟用户登录WEIBO，就成为从网页上抓取微薄数据的第一步。</p>

<h3 id="section-1">模拟登录相关资源</h3>
<p>目前网上有很多关于模拟用户登录WEIBO的文章:</p>

<p>+ 使用<a href="https://addons.mozilla.org/en-us/firefox/addon/httpfox/">HTTPFOX</a>来侦测用户登录WEIBO.COM的过程<a href="http://blog.csdn.net/yonglaixiazaide/article/details/7923468">[1]</a>, <a href="http://www.jishuziyuan.com/archive/supeercrsky/8016047.html">[2]</a></p>

<p>+ 模拟登录PHP<a href="http://blog.csdn.net/lgg201/article/details/8050606">[3]</a></p>

<p>+ Python实现<a href="http://hi.baidu.com/enmzqbeadvfhiye/item/4018b4e7775cd3edfa42bad3">[4]</a>, <a href="http://www.cnblogs.com/mouse-coder/archive/2013/03/03/2941265.html">[5]</a></p>

<p>+ JAVA实现<a href="http://marspring.mobi/http-client-weibo/">[6]</a></p>

<p>其中<a href="http://hi.baidu.com/enmzqbeadvfhiye/item/4018b4e7775cd3edfa42bad3">[4] 新浪微博登录rsa加密方法</a>介绍了使用RSA2加密方式模拟登录，<a href="http://www.cnblogs.com/mouse-coder/archive/2013/03/03/2941265.html">[5] 模拟新浪微博登录（Python+RSA加密算法）</a>和<a href="http://marspring.mobi/http-client-weibo/">[6] httpclient登录新浪微博（非SDK方式）</a>分别给出了RSA加密算法模拟登录WEIBO的PYTHON和JAVA实现。</p>

<blockquote>
  <p>关于RSA加密方式，参考维基词条RSA<a href="http://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">[zh]</a>, <a href="http://en.wikipedia.org/wiki/RSA">[en]</a></p>
</blockquote>

<p>关注PYTHON实现的读者可以阅读下面关于此事的豆瓣讨论：</p>

<blockquote>
  <p>Python模拟新浪微薄登录的豆瓣讨论<a href="http://www.douban.com/note/201767245/">[7]</a></p>
</blockquote>

<h3 id="pythonrsa2cookies">Python+RSA2+Cookies实现模拟登录</h3>
<p>由于新浪登录加密方式的改变，参见<a href="http://www.douban.com/note/201767245/">[7]</a>，这里仅介绍使用RSA加密方法登录，要使用RSA加密方式，必须安装RSA模块，所以：
<!-- more --></p>

<h4 id="pythonrsapython-rsahttpspypipythonorgpypirsa311">1.安装PYTHON实现的RSA加密算法模块<a href="https://pypi.python.org/pypi/rsa/3.1.1">python-rsa</a>.</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&gt; easy_install rsa
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>python-rsa的文档地址<a href="http://stuvel.eu/files/python-rsa-doc/index.html">http://stuvel.eu/files/python-rsa-doc/index.html</a></p>

<h4 id="rsa">2.使用RSA加密用户登录密码</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">get_pwd_rsa</span><span class="p">(</span><span class="n">pwd</span><span class="p">,</span> <span class="n">servertime</span><span class="p">,</span> <span class="n">nonce</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">        Get rsa2 encrypted password, using RSA module from https://pypi.python.org/pypi/rsa/3.1.1, documents can be accessed at </span>
</span><span class="line"><span class="sd">        http://stuvel.eu/files/python-rsa-doc/index.html</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="c">#n, n parameter of RSA public key, which is published by WEIBO.COM</span>
</span><span class="line">    <span class="c">#Hardcoded here but you can also find it from values return from prelogin status above</span>
</span><span class="line">    <span class="n">weibo_rsa_n</span> <span class="o">=</span> <span class="s">&#39;EB2A38568661887FA180BDDB5CABD5F21C7BFD59C090CB2D245A87AC253062882729293E5506350508E7F9AA3BB77F4333231490F915F6D63C55FE2F08A49B353F444AD3993CACC02DB784ABBB8E42A9B1BBFFFB38BE18D78E87A0E41B9B8F73A928EE0CCEE1F6739884B9777E4FE9E88A1BBE495927AC4A799B3181D6442443&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="c">#e, exponent parameter of RSA public key, WEIBO uses 0x10001, which is 65537 in Decimal</span>
</span><span class="line">    <span class="n">weibo_rsa_e</span> <span class="o">=</span> <span class="mi">65537</span>
</span><span class="line">
</span><span class="line">    <span class="n">message</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">servertime</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">nonce</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c">#construct WEIBO RSA Publickey using n and e above, note that n is a hex string</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="n">rsa</span><span class="o">.</span><span class="n">PublicKey</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">weibo_rsa_n</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="n">weibo_rsa_e</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c">#get encrypted password</span>
</span><span class="line">    <span class="n">encropy_pwd</span> <span class="o">=</span> <span class="n">rsa</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c">#trun back encrypted password binaries to hex string</span>
</span><span class="line">    <span class="k">return</span> <span class="n">binascii</span><span class="o">.</span><span class="n">b2a_hex</span><span class="p">(</span><span class="n">encropy_pwd</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="cookies">3.验证用户登录是否成功，并且保存Cookies</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"> <span class="n">data</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">login_url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line"> <span class="c">#Verify login feedback, check whether result is TRUE</span>
</span><span class="line"> <span class="n">patt_feedback</span> <span class="o">=</span> <span class="s">&#39;feedBackUrlCallBack\((.*)\)&#39;</span>
</span><span class="line"> <span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">patt_feedback</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">MULTILINE</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"> <span class="n">feedback</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"> <span class="n">feedback_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">feedback</span><span class="p">)</span>
</span><span class="line"> <span class="k">if</span> <span class="n">feedback_json</span><span class="p">[</span><span class="s">&#39;result&#39;</span><span class="p">]:</span>
</span><span class="line"> 	<span class="n">cookie_jar2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">cookie_file</span><span class="p">,</span><span class="n">ignore_discard</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">ignore_expires</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c">#Save Cookies</span>
</span><span class="line"> 	<span class="k">return</span> <span class="mi">1</span>
</span><span class="line"> <span class="k">else</span><span class="p">:</span>
</span><span class="line"> 	<span class="k">return</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">存在的问题</h3>
<p>登入过程中返回ERROR-4049:需要输入验证码，这个问题在<a href="http://www.cnblogs.com/mouse-coder/archive/2013/03/03/2941265.html">[5] 模拟新浪微博登录（Python+RSA加密算法）</a>中也有提到。</p>

<h3 id="section-3">源代码</h3>
<p>文中代码片段的源码地址<a href="https://github.com/yoyzhou/weibo_login">github.com/yoyzhou/weibo_login</a></p>

<h3 id="section-4">相关阅读</h3>

<p>1. <a href="http://yoyzhou.github.io/blog/2013/03/23/extract-data-with-beautifulsoup-taking-weibo-4-example/">使用Beautiful Soup抽取网页数据，解析微博用户关注信息</a>，介绍如何使用Beautiful Soup抽取网页数据。</p>

<p>2. <a href="http://yoyzhou.github.io/blog/2013/04/08/weibo-scrapy-framework-with-multi-threading/">基于UID的WEIBO信息抓取框架WEIBO_SCRAPY</a>，详细介绍了多线程WEIBO数据抓取框架WEIBO_SCRAPY。</p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python线程同步机制: Locks, RLocks, Semaphores, Conditions, Events和Queues]]></title>
    <link href="http://yoyzhou.github.io/blog/2013/02/28/python-threads-synchronization-locks/"/>
    <updated>2013-02-28T23:24:00-08:00</updated>
    <id>http://yoyzhou.github.io/blog/2013/02/28/python-threads-synchronization-locks</id>
    <content type="html"><![CDATA[<blockquote>
  <p>翻译自<a href="http://www.laurentluce.com/">Laurent Luce</a>的博客<br />
原文名称：Python threads synchronization: Locks, RLocks, Semaphores, Conditions, Events and Queues<br />
原文连接：<a href="http://www.laurentluce.com/posts/python-threads-synchronization-locks-rlocks-semaphores-conditions-events-and-queues/">http://www.laurentluce.com/posts/python-threads-synchronization-locks-rlocks-semaphores-conditions-events-and-queues/</a></p>
</blockquote>

<p>本文详细地阐述了Python线程同步机制。你将学习到以下有关Python线程同步机制：Lock，RLock，Semaphore，Condition，Event和Queue，还有Python的内部是如何实现这些机制的。
本文给出的程序的源代码可以在<a href="https://github.com/laurentluce/python-tutorials/tree/master/threads">github</a>上找到。</p>

<p>首先让我们来看一个没有使用线程同步的简单程序。</p>
<h2>线程（Threading）</h2>
<p>我们希望编程一个从一些URL中获得内容并且将内容写入文件的程序，完成这个程序可以不使用线程，为了加快获取的速度，我们使用2个线程，每个线程处理一半的URL。</p>

<p>注：完成这个程序的最好方式是使用一个URL队列，但是以下面的例子开始我的讲解更加合适。</p>

<p>类FetchUrls是threading.Thread的子类，他拥有一个URL列表和一个写URL内容的文件对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">FetchUrls</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">  下载URL内容的线程</span>
</span><span class="line"><span class="sd">  &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">urls</span><span class="p">,</span> <span class="n">output</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    构造器</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @param urls 需要下载的URL列表</span>
</span><span class="line"><span class="sd">    @param output 写URL内容的输出文件</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">urls</span> <span class="o">=</span> <span class="n">urls</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">output</span> <span class="o">=</span> <span class="n">output</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    实现父类Thread的run方法，打开URL，并且一个一个的下载URL的内容</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">urls</span><span class="p">:</span>
</span><span class="line">      <span class="n">url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">urls</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">      <span class="n">req</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">      <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="n">d</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class="line">      <span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;URL </span><span class="si">%s</span><span class="s"> failed: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">output</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;write done by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;URL </span><span class="si">%s</span><span class="s"> fetched by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>main函数启动了两个线程，之后让他们下载URL内容。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class="line">  <span class="c"># URL列表1</span>
</span><span class="line">  <span class="n">urls1</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;http://www.google.com&#39;</span><span class="p">,</span> <span class="s">&#39;http://www.facebook.com&#39;</span><span class="p">]</span>
</span><span class="line">  <span class="c"># URL列表2</span>
</span><span class="line">  <span class="n">urls2</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;http://www.yahoo.com&#39;</span><span class="p">,</span> <span class="s">&#39;http://www.youtube.com&#39;</span><span class="p">]</span>
</span><span class="line">  <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;output.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w+&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="n">t1</span> <span class="o">=</span> <span class="n">FetchUrls</span><span class="p">(</span><span class="n">urls1</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class="line">  <span class="n">t2</span> <span class="o">=</span> <span class="n">FetchUrls</span><span class="p">(</span><span class="n">urls2</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class="line">  <span class="n">t1</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class="line">  <span class="n">t2</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class="line">  <span class="n">t1</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class="line">  <span class="n">t2</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class="line">  <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">  <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的程序将出现两个线程同时写一个文件的情况，导致文件一团乱码。我们需要找到一种在给定的时间里只有一个线程写文件的方法。实现的方法就是使用像锁（Locks）这样的线程同步机制。</p>

<h2>锁（Lock）</h2>
<p>锁有两种状态：被锁（locked）和没有被锁（unlocked）。拥有acquire()和release()两种方法，并且遵循一下的规则：</p>
<ul>
<li>如果一个锁的状态是unlocked，调用acquire()方法改变它的状态为locked；</li>
<li>如果一个锁的状态是locked，acquire()方法将会阻塞，直到另一个线程调用release()方法释放了锁；</li>
<li>如果一个锁的状态是unlocked调用release()会抛出RuntimeError异常；</li>
<li>如果一个锁的状态是locked，调用release()方法改变它的状态为unlocked。</li>
</ul>
<p>解决上面两个线程同时写一个文件的问题的方法就是：我们给类FetchUrls的构造器中传入一个锁（lock），使用这个锁来保护文件操作，实现在给定的时间只有一个线程写文件。下面的代码只显示了关于lock部分的修改。完整的源码可以在threads/lock.py中找到。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">FetchUrls</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">urls</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">lock</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">lock</span> <span class="o">=</span> <span class="n">lock</span>	<span class="c">#传入的lock对象</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">urls</span><span class="p">:</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>	<span class="c">#获得lock对象，lock状态变为locked，并且阻塞其他线程获取lock对象（写文件的权利）</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;lock acquired by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">output</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;write done by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;lock released by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">lock</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>	<span class="c">#释放lock对象，lock状态变为unlocked，其他的线程可以重新获取lock对象</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="n">t1</span> <span class="o">=</span> <span class="n">FetchUrls</span><span class="p">(</span><span class="n">urls1</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">lock</span><span class="p">)</span>
</span><span class="line">  <span class="n">t2</span> <span class="o">=</span> <span class="n">FetchUrls</span><span class="p">(</span><span class="n">urls2</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">lock</span><span class="p">)</span>
</span><span class="line">  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://www.laurentluce.com/images/blog/threads/lock.png" /></p>

<p>以下是程序的输出：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>python locks.py
</span><span class="line">lock acquired by Thread-2
</span><span class="line">write <span class="k">done</span> by Thread-2
</span><span class="line">lock released by Thread-2
</span><span class="line">URL http://www.youtube.com fetched by Thread-2
</span><span class="line">lock acquired by Thread-1
</span><span class="line">write <span class="k">done</span> by Thread-1
</span><span class="line">lock released by Thread-1
</span><span class="line">URL http://www.facebook.com fetched by Thread-1
</span><span class="line">lock acquired by Thread-2
</span><span class="line">write <span class="k">done</span> by Thread-2
</span><span class="line">lock released by Thread-2
</span><span class="line">URL http://www.yahoo.com fetched by Thread-2
</span><span class="line">lock acquired by Thread-1
</span><span class="line">write <span class="k">done</span> by Thread-1
</span><span class="line">lock released by Thread-1
</span><span class="line">URL http://www.google.com fetched by Thread-1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从上面的输出我们可以看出，写文件的操作被锁保护，没有出现两个线程同时写一个文件的现象。</p>

<p>下面我们看一下Python内部是如何实现锁（Lock）的。我正在使用的Python版本是Linux操作系统上的Python 2.6.6。</p>

<p>threading模块的Lock()方法就是thread.allocate_lock，代码可以在Lib/threading.py中找到。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">Lock</span> <span class="o">=</span> <span class="n">_allocate_lock</span>
</span><span class="line"><span class="n">_allocate_lock</span> <span class="o">=</span> <span class="n">thread</span><span class="o">.</span><span class="n">allocate_lock</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more -->
<p>C的实现在Python/thread_pthread.h中。程序假定你的系统支持POSIX信号量（semaphores）。sem_init()初始化锁（Lock）所在地址的信号量。初始的信号量值是1，意味着锁没有被锁（unlocked）。信号量将在处理器的不同线程之间共享。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">PyThread_type_lock</span>
</span><span class="line"><span class="nf">PyThread_allocate_lock</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="n">lock</span> <span class="o">=</span> <span class="p">(</span><span class="kt">sem_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">sem_t</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">lock</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">status</span> <span class="o">=</span> <span class="n">sem_init</span><span class="p">(</span><span class="n">lock</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="n">CHECK_STATUS</span><span class="p">(</span><span class="s">&quot;sem_init&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="p">....</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当acquire()方法被调用时，下面的C代码将被执行。默认的waitflag值是1，表示调用将被被阻塞直到锁被释放。sem_wait()方法减少信号量的值或者被阻塞直到信号量大于零。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span>
</span><span class="line"><span class="nf">PyThread_acquire_lock</span><span class="p">(</span><span class="n">PyThread_type_lock</span> <span class="n">lock</span><span class="p">,</span> <span class="kt">int</span> <span class="n">waitflag</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="k">do</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">waitflag</span><span class="p">)</span>
</span><span class="line">            <span class="n">status</span> <span class="o">=</span> <span class="n">fix_status</span><span class="p">(</span><span class="n">sem_wait</span><span class="p">(</span><span class="n">thelock</span><span class="p">));</span>
</span><span class="line">        <span class="k">else</span>
</span><span class="line">            <span class="n">status</span> <span class="o">=</span> <span class="n">fix_status</span><span class="p">(</span><span class="n">sem_trywait</span><span class="p">(</span><span class="n">thelock</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">);</span> <span class="cm">/* Retry if interrupted by a signal */</span>
</span><span class="line">    <span class="p">....</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当release()方法被调用时，下面的C代码将被执行。sem_post()方法增加信号量。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span>
</span><span class="line"><span class="nf">PyThread_release_lock</span><span class="p">(</span><span class="n">PyThread_type_lock</span> <span class="n">lock</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="n">status</span> <span class="o">=</span> <span class="n">sem_post</span><span class="p">(</span><span class="n">thelock</span><span class="p">);</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以将锁（Lock）与“with”语句一起使用，锁可以作为上下文管理器（context manager）。使用“with”语句的好处是：当程序执行到“with”语句时，acquire()方法将被调用，当程序执行完“with”语句时，release()方法会被调用（译注：这样我们就不用显示地调用acquire()和release()方法，而是由“with”语句根据上下文来管理锁的获取和释放。）下面我们用“with”语句重写FetchUrls类。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">FetchUrls</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">urls</span><span class="p">:</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">      <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>	<span class="c">#使用“with”语句管理锁的获取和释放</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;lock acquired by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">output</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;write done by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;lock released by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2>可重入锁（RLock）</h2>

<p>RLock是可重入锁（reentrant lock），acquire()能够不被阻塞的被同一个线程调用多次。要注意的是release()需要调用与acquire()相同的次数才能释放锁。</p>

<p>使用Lock，下面的代码第二次调用acquire()时将被阻塞：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class="line"><span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line"><span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果你使用的是RLock，下面的代码第二次调用acquire()不会被阻塞:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">rlock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">RLock</span><span class="p">()</span>
</span><span class="line"><span class="n">rlock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line"><span class="n">rlock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>RLock使用的同样是thread.allocate_lock()，不同的是他跟踪宿主线程（the owner thread）来实现可重入的特性。下面是RLock的acquire()实现。如果调用acquire()的线程是资源的所有者，记录调用acquire()次数的计数器就会加1。如果不是，就将试图去获取锁。线程第一次获得锁时，锁的拥有者将会被保存，同时计数器初始化为1。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">acquire</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">blocking</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">    <span class="n">me</span> <span class="o">=</span> <span class="n">_get_ident</span><span class="p">()</span>
</span><span class="line">    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__owner</span> <span class="o">==</span> <span class="n">me</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__count</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__count</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">rc</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__block</span><span class="o">.</span><span class="n">acquire</span><span class="p">(</span><span class="n">blocking</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">rc</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__owner</span> <span class="o">=</span> <span class="n">me</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__count</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="k">return</span> <span class="n">rc</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面我们看一下可重入锁（RLock）的release()方法。首先它会去确认调用者是否是锁的拥有者。如果是的话，计数器减1；如果计数器为0，那么锁将会被释放，这时其他线程就可以去获取锁了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__owner</span> <span class="o">!=</span> <span class="n">_get_ident</span><span class="p">():</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&quot;cannot release un-acquired lock&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__count</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">if</span> <span class="ow">not</span> <span class="n">count</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__owner</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__block</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2>条件（Condition）</h2>
<p>条件同步机制是指：一个线程等待特定条件，而另一个线程发出特定条件满足的信号。
解释条件同步机制的一个很好的例子就是生产者/消费者（producer/consumer）模型。生产者随机的往列表中“生产”一个随机整数，而消费者从列表中“消费”整数。完整的源码可以在threads/condition.py中找到</p>

<p>在producer类中，producer获得锁，生产一个随机整数，通知消费者有了可用的“商品”，并且释放锁。producer无限地向列表中添加整数，同时在两个添加操作中间随机的停顿一会儿。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Producer</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">  向列表中生产随机整数</span>
</span><span class="line"><span class="sd">  &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">integers</span><span class="p">,</span> <span class="n">condition</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    构造器</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @param integers 整数列表</span>
</span><span class="line"><span class="sd">    @param condition 条件同步对象</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">integers</span> <span class="o">=</span> <span class="n">integers</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">condition</span> <span class="o">=</span> <span class="n">condition</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    实现Thread的run方法。在随机时间向列表中添加一个随机整数</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">      <span class="n">integer</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>	<span class="c">#获取条件锁</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;condition acquired by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">integers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">integer</span><span class="p">)</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> appended to list by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">integer</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;condition notified by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="o">.</span><span class="n">notify</span><span class="p">()</span>	<span class="c">#唤醒消费者线程</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;condition released by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>	<span class="c">#释放条件锁</span>
</span><span class="line">      <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>		<span class="c">#暂停1秒钟</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面是消费者（consumer）类。它获取锁，检查列表中是否有整数，如果没有，等待生产者的通知。当消费者获取整数之后，释放锁。<br />
注意在wait()方法中会释放锁，这样生产者就能获得资源并且生产“商品”。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Consumer</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">  从列表中消费整数</span>
</span><span class="line"><span class="sd">  &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">integers</span><span class="p">,</span> <span class="n">condition</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    构造器</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @param integers 整数列表</span>
</span><span class="line"><span class="sd">    @param condition 条件同步对象</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">integers</span> <span class="o">=</span> <span class="n">integers</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">condition</span> <span class="o">=</span> <span class="n">condition</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    实现Thread的run()方法，从列表中消费整数</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>	<span class="c">#获取条件锁</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;condition acquired by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">integers</span><span class="p">:</span>	<span class="c">#判断是否有整数</span>
</span><span class="line">          <span class="n">integer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">integers</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">          <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> popped from list by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">integer</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">          <span class="k">break</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;condition wait by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>	<span class="c">#等待商品，并且释放资源</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;condition released by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>	<span class="c">#最后释放条件锁</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://www.laurentluce.com/images/blog/threads/condition.png" /></p>

<p>下面我们编写main方法，创建两个线程：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class="line">  <span class="n">integers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">  <span class="n">condition</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Condition</span><span class="p">()</span>
</span><span class="line">  <span class="n">t1</span> <span class="o">=</span> <span class="n">Producer</span><span class="p">(</span><span class="n">integers</span><span class="p">,</span> <span class="n">condition</span><span class="p">)</span>
</span><span class="line">  <span class="n">t2</span> <span class="o">=</span> <span class="n">Consumer</span><span class="p">(</span><span class="n">integers</span><span class="p">,</span> <span class="n">condition</span><span class="p">)</span>
</span><span class="line">  <span class="n">t1</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class="line">  <span class="n">t2</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class="line">  <span class="n">t1</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class="line">  <span class="n">t2</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">  <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面是程序的输出：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>python condition.py
</span><span class="line">condition acquired by Thread-1
</span><span class="line"><span class="m">159</span> appended to list by Thread-1
</span><span class="line">condition notified by Thread-1
</span><span class="line">condition released by Thread-1
</span><span class="line">condition acquired by Thread-2
</span><span class="line"><span class="m">159</span> popped from list by Thread-2
</span><span class="line">condition released by Thread-2
</span><span class="line">condition acquired by Thread-2
</span><span class="line">condition <span class="nb">wait </span>by Thread-2
</span><span class="line">condition acquired by Thread-1
</span><span class="line"><span class="m">116</span> appended to list by Thread-1
</span><span class="line">condition notified by Thread-1
</span><span class="line">condition released by Thread-1
</span><span class="line"><span class="m">116</span> popped from list by Thread-2
</span><span class="line">condition released by Thread-2
</span><span class="line">condition acquired by Thread-2
</span><span class="line">condition <span class="nb">wait </span>by Thread-2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thread-1添加159到列表中，通知消费者同时释放锁，Thread-2获得锁，取回159，并且释放锁。此时因为执行time.sleep(1)，生产者正在睡眠，当消费者再次试图获取整数时，列表中并没有整数，这时消费者进入等待状态，等待生产者的通知。当wait()被调用时，它会释放资源，从而生产者能够利用资源生产整数。</p>

<p>下面我们看一下Python内部是如何实现条件同步机制的。如果用户没有传入锁（lock）对象，condition类的构造器创建一个可重入锁（RLock），这个锁将会在调用acquire()和release()时使用。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">_Condition</span><span class="p">(</span><span class="n">_Verbose</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">lock</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="n">_Verbose</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">verbose</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">lock</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="n">lock</span> <span class="o">=</span> <span class="n">RLock</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__lock</span> <span class="o">=</span> <span class="n">lock</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来是wait()方法。为了简化说明，我们假定在调用wait()方法时不使用timeout参数。wait()方法创建了一个名为waiter的锁，并且设置锁的状态为locked。这个waiter锁用于线程间的通讯，这样生产者（在生产完整数之后）就可以通知消费者释放waiter()锁。锁对象将会被添加到等待者列表，并且在调用waiter.acquire()时被阻塞。一开始condition锁的状态被保存，并且在wait()结束时被恢复。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">wait</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="n">waiter</span> <span class="o">=</span> <span class="n">_allocate_lock</span><span class="p">()</span>
</span><span class="line">    <span class="n">waiter</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__waiters</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">waiter</span><span class="p">)</span>
</span><span class="line">    <span class="n">saved_state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_release_save</span><span class="p">()</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>    <span class="c"># 无论如何恢复状态 (例如, KeyboardInterrupt)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">timeout</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="n">waiter</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">            <span class="o">...</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">_acquire_restore</span><span class="p">(</span><span class="n">saved_state</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当生产者调用notify()方法时，notify()释放waiter锁，唤醒被阻塞的消费者。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="n">__waiters</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__waiters</span>
</span><span class="line">    <span class="n">waiters</span> <span class="o">=</span> <span class="n">__waiters</span><span class="p">[:</span><span class="n">n</span><span class="p">]</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="k">for</span> <span class="n">waiter</span> <span class="ow">in</span> <span class="n">waiters</span><span class="p">:</span>
</span><span class="line">        <span class="n">waiter</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span><span class="line">        <span class="k">try</span><span class="p">:</span>
</span><span class="line">            <span class="n">__waiters</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">waiter</span><span class="p">)</span>
</span><span class="line">        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class="line">            <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样Condition对象也可以和“with”语句一起使用，这样“with”语句上下文会帮我们调用acquire()和release()方法。下面的代码使用“with”语句改写了生产者和消费者类。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Producer</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">      <span class="n">integer</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
</span><span class="line">      <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;condition acquired by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">integers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">integer</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> appended to list by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">integer</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;condition notified by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="o">.</span><span class="n">notify</span><span class="p">()</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;condition released by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Consumer</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="o">...</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">      <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;condition acquired by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">          <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">integers</span><span class="p">:</span>
</span><span class="line">            <span class="n">integer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">integers</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> popped from list by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">integer</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">          <span class="k">print</span> <span class="s">&#39;condition wait by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">          <span class="bp">self</span><span class="o">.</span><span class="n">condition</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;condition released by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2>信号量（Semaphore）</h2>
<p>信号量同步基于内部计数器，每调用一次acquire()，计数器减1；每调用一次release()，计数器加1.当计数器为0时，acquire()调用被阻塞。这是迪科斯彻（Dijkstra）信号量概念P()和V()的Python实现。信号量同步机制适用于访问像服务器这样的有限资源。</p>

<p>信号量同步的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">semaphore</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Semaphore</span><span class="p">()</span>
</span><span class="line"><span class="n">semaphore</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line"> <span class="c"># 使用共享资源</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="n">semaphore</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>让我们看一下信号量同步在Python内部是如何实现的。构造器使用参数value来表示计数器的初始值，默认值为1。一个条件锁实例用于保护计数器，同时当信号量被释放时通知其他线程。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">_Semaphore</span><span class="p">(</span><span class="n">_Verbose</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="n">_Verbose</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">verbose</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span> <span class="o">=</span> <span class="n">Condition</span><span class="p">(</span><span class="n">Lock</span><span class="p">())</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">        <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>acquire()方法。如果信号量为0，线程被条件锁的wait()方法阻塞，直到被其他线程唤醒；如果计数器大于0，调用acquire()使计数器减1。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">acquire</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">blocking</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">    <span class="n">rc</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">__value</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__value</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">rc</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span><span class="line">    <span class="k">return</span> <span class="n">rc</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>信号量类的release()方法增加计数器的值并且唤醒其他线程。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__value</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">notify</span><span class="p">()</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>还有一个“有限”(bounded)信号量类，可以确保release()方法的调用次数不能超过给定的初始信号量数值(value参数)，下面是“有限”信号量类的Python代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">_BoundedSemaphore</span><span class="p">(</span><span class="n">_Semaphore</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;检查release()的调用次数是否小于等于acquire()次数&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="n">_Semaphore</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">verbose</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">_initial_value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_Semaphore__value</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_initial_value</span><span class="p">:</span>
</span><span class="line">            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">,</span> <span class="s">&quot;Semaphore released too many times&quot;</span>
</span><span class="line">        <span class="k">return</span> <span class="n">_Semaphore</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样信号量(Semaphore)对象可以和“with”一起使用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">semaphore</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Semaphore</span><span class="p">()</span>
</span><span class="line"><span class="k">with</span> <span class="n">semaphore</span><span class="p">:</span>
</span><span class="line">  <span class="c"># 使用共享资源</span>
</span><span class="line">  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2>事件（Event）</h2>
<p>基于事件的同步是指：一个线程发送/传递事件，另外的线程等待事件的触发。
让我们再来看看前面的生产者和消费者的例子，现在我们把它转换成使用事件同步而不是条件同步。完整的源码可以在threads/event.py里面找到。</p>

<p>首先是生产者类，我们传入一个Event实例给构造器而不是Condition实例。一旦整数被添加进列表，事件(event)被设置和发送去唤醒消费者。注意事件(event)实例默认是被发送的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Producer</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">  向列表中生产随机整数</span>
</span><span class="line"><span class="sd">  &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">integers</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    构造器</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @param integers 整数列表</span>
</span><span class="line"><span class="sd">    @param event 事件同步对象</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">integers</span> <span class="o">=</span> <span class="n">integers</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">event</span> <span class="o">=</span> <span class="n">event</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    实现Thread的run方法。在随机时间向列表中添加一个随机整数</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">      <span class="n">integer</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">integers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">integer</span><span class="p">)</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> appended to list by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">integer</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;event set by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">set</span><span class="p">()</span>		<span class="c">#设置事件	</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>	<span class="c">#发送事件</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;event cleared by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">      <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样我们传入一个Event实例给消费者的构造器，消费者阻塞在wait()方法，等待事件被触发，即有可供消费的整数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Consumer</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">   从列表中消费整数</span>
</span><span class="line"><span class="sd">  &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">integers</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    构造器</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @param integers 整数列表</span>
</span><span class="line"><span class="sd">    @param event 事件同步对象</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">integers</span> <span class="o">=</span> <span class="n">integers</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">event</span> <span class="o">=</span> <span class="n">event</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    实现Thread的run()方法，从列表中消费整数</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>	<span class="c">#等待事件被触发</span>
</span><span class="line">      <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="n">integer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">integers</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> popped from list by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">integer</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">      <span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
</span><span class="line">        <span class="c"># catch pop on empty list</span>
</span><span class="line">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://www.laurentluce.com/images/blog/threads/event.png" /></p>

<p>下面是程序的输出，Thread-1添加124到整数列表中，然后设置事件并且唤醒消费者。消费者从wait()方法中唤醒，在列表中获取到整数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>python event.py
</span><span class="line"><span class="m">124</span> appended to list by Thread-1
</span><span class="line">event <span class="nb">set </span>by Thread-1
</span><span class="line">event cleared by Thread-1
</span><span class="line"><span class="m">124</span> popped from list by Thread-2
</span><span class="line"><span class="m">223</span> appended to list by Thread-1
</span><span class="line">event <span class="nb">set </span>by Thread-1
</span><span class="line">event cleared by Thread-1
</span><span class="line"><span class="m">223</span> popped from list by Thread-2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>事件锁的Python内部实现，首先是Event锁的构造器。构造器中创建了一个条件（Condition）锁，来保护事件标志（event flag）,同事唤醒其他线程当事件被设置时。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">_Event</span><span class="p">(</span><span class="n">_Verbose</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="n">_Verbose</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">verbose</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span> <span class="o">=</span> <span class="n">Condition</span><span class="p">(</span><span class="n">Lock</span><span class="p">())</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__flag</span> <span class="o">=</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来是set()方法，它设置事件标志为True，并且唤醒其他线程。条件锁对象保护程序修改事件标志状态的关键部分。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__flag</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">notify_all</span><span class="p">()</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而clear()方法正好相反，它设置时间标志为False。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">clear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__flag</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，wait()方法将阻塞直到调用了set()方法，当事件标志为True时，wait()方法就什么也不做。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">wait</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">__flag</span><span class="p">:</span>	<span class="c">#如果flag不为真</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__cond</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2>队列（Queue）</h2>
<p>队列是一个非常好的线程同步机制，使用队列我们不用关心锁，队列会为我们处理锁的问题。
队列(Queue)有以下4个用户感兴趣的方法：</p>
<ul>
<li><b>put:</b> 向队列中添加一个项；</li>
<li><b>get:</b> 从队列中删除并返回一个项；</li>
<li><b>task_done:</b> 当某一项任务完成时调用；</li>
<li><b>join:</b> 阻塞知道所有的项目都被处理完。</li>
</ul>

<p>下面我们将上面的生产者/消费者的例子转换成使用队列。源代码可以在threads/queue.py中找到。</p>

<p>首先是生产者类，我们不需要传入一个整数列表，因为我们使用队列就可以存储生成的整数。生产者线程在一个无限循环中生成整数并将生成的整数添加到队列中。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Producer</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">  向队列中生产随机整数</span>
</span><span class="line"><span class="sd">  &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">queue</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    构造器</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @param integers 整数列表	#译注：不需要这个参数</span>
</span><span class="line"><span class="sd">    @param queue 队列同步对象</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="n">queue</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    实现Thread的run方法。在随机时间向队列中添加一个随机整数</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">      <span class="n">integer</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">integer</span><span class="p">)</span>	<span class="c">#将生成的整数添加到队列</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> put to queue by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">integer</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">      <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面是消费者类。线程从队列中获取整数，并且在任务完成时调用task_done()方法。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Consumer</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class="line">  <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">  从队列中消费整数</span>
</span><span class="line"><span class="sd">  &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">queue</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    构造器</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @param integers 整数列表	#译注：不需要这个参数</span>
</span><span class="line"><span class="sd">    @param queue 队列同步对象</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="n">queue</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    实现Thread的run()方法，从队列中消费整数</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">      <span class="n">integer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> popped from list by </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">integer</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">task_done</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以下是程序的输出：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>python queue.py
</span><span class="line"><span class="m">61</span> put to queue by Thread-1
</span><span class="line"><span class="m">61</span> popped from list by Thread-2
</span><span class="line"><span class="m">6</span> put to queue by Thread-1
</span><span class="line"><span class="m">6</span> popped from list by Thread-2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>队列同步的最大好处就是队列帮我们处理了锁。现在让我们去看看在Python内部是如何实现队列同步机制的。</p>

<p>队列（Queue）构造器创建一个锁，保护队列元素的添加和删除操作。同时创建了一些条件锁对象处理队列事件，比如队列不空事件（削除get()的阻塞），队列不满事件（削除put()的阻塞）和所有项目都被处理完事件（削除join()的阻塞）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Queue</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">maxsize</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">mutex</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">not_empty</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Condition</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">mutex</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">not_full</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Condition</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">mutex</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">all_tasks_done</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Condition</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">mutex</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">unfinished_tasks</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>put()方法向队列中添加一个项，或者阻塞如果队列已满。这时队列非空，它唤醒阻塞在get()方法中的线程。更多关于Condition锁的内容请查看上面的讲解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">block</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">not_full</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">maxsize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="o">...</span>
</span><span class="line">            <span class="k">elif</span> <span class="n">timeout</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">                <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">_qsize</span><span class="p">()</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">maxsize</span><span class="p">:</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">not_full</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">_put</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">unfinished_tasks</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">not_empty</span><span class="o">.</span><span class="n">notify</span><span class="p">()</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">not_full</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>get()方法从队列中获得并删除一个项，或者阻塞当队列为空时。这时队列不满，他唤醒阻塞在put()方法中的线程。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">block</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">not_empty</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="o">...</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">timeout</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">_qsize</span><span class="p">():</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">not_empty</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class="line">        <span class="n">item</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">not_full</span><span class="o">.</span><span class="n">notify</span><span class="p">()</span>
</span><span class="line">        <span class="k">return</span> <span class="n">item</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">not_empty</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当调用task_done()方法时，未完成任务的数量减1。如果未完成任务的数量为0，线程等待队列完成join()方法。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">task_done</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">all_tasks_done</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="n">unfinished</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unfinished_tasks</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">if</span> <span class="n">unfinished</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">unfinished</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&#39;task_done() called too many times&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">all_tasks_done</span><span class="o">.</span><span class="n">notify_all</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">unfinished_tasks</span> <span class="o">=</span> <span class="n">unfinished</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">all_tasks_done</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">join</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">all_tasks_done</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">unfinished_tasks</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">all_tasks_done</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">all_tasks_done</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://www.laurentluce.com/images/blog/threads/queue.png" /></p>

<p>本文到此结束，希望您喜欢这篇文章。欢迎您的留言和反馈。</p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Python Setuptools/Distribute for Python 2.x and Python 3.x]]></title>
    <link href="http://yoyzhou.github.io/blog/2012/08/12/install-python-setuptools-slash-distribute-for-both-python2-and-python3/"/>
    <updated>2012-08-12T20:23:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2012/08/12/install-python-setuptools-slash-distribute-for-both-python2-and-python3</id>
    <content type="html"><![CDATA[<p>Since <a href="http://pypi.python.org/pypi/setuptools/">Setuptools</a> doesn’t support Python3.* so far, for Python3.* we choose <a href="http://pypi.python.org/pypi/distribute/">Distribute</a>, <em><strong>it is a fork of the Setuptools project.</strong></em></p>

<blockquote><p>Distribute is intended to replace Setuptools as the standard method for working with Python module distributions.</p><footer><strong>@PyPI Distribute</strong> <cite><a href="http://pypi.python.org/pypi/distribute/#disclaimers">pypi.python.org/pypi/distribute/&hellip;</a></cite></footer></blockquote>

<h3 id="install-python-setuptools-with-easyinstall-for-python-2x">Install python Setuptools with easy_install for Python 2.x</h3>

<p>1 Download setuptools from http://pypi.python.org/pypi/setuptools/, select the appropriate OS/version you want.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo sh Downloads/setuptools-0.6c11-py2.7.egg
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Processing setuptools-0.6c11-py2.7.egg
</span><span class="line">Copying setuptools-0.6c11-py2.7.egg to /usr/local/lib/python2.7/dist-packages
</span><span class="line">Adding setuptools 0.6c11 to easy-install.pth file
</span><span class="line">Installing easy_install script to /usr/local/bin
</span><span class="line">Installing easy_install-2.7 script to /usr/local/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="install-python-distribute-with-easyinstall-for-python-3x">Install python Distribute with easy_install for Python 3.x</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">curl -O http://python-distribute.org/distribute_setup.py
</span><span class="line">sudo &lt;python-cmd&gt; distribute_setup.py
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Adding distribute 0.6.28 to easy-install.pth file
</span><span class="line">Installing easy_install script to /usr/local/bin
</span><span class="line">Installing easy_install-3.2 script to /usr/local/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>Note:</strong> Make sure &lt;python-cmd&gt; is a python3.* command, in my PC, Python2.* command is python, while the Python3.* command is python3,  use &lt;python-cmd&gt; –version to check out version of &lt;python-cmd&gt;. </p>

<h3 id="use-easyinstall-2x-and-3x">Use easy_install 2.x and 3.x</h3>
<p>Now per installing 2.x packages, using:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">easy_install-2.7  &lt;package-name&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>while using</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">easy_install-3.2  &lt;package-name&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>to install version 3.x packages.</p>

<p><code>---EOF---</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Fundamentals - Branch: Learning Notes of Pro Git]]></title>
    <link href="http://yoyzhou.github.io/blog/2012/08/11/git-fundamentals-learning-notes-of-pro-git-part2/"/>
    <updated>2012-08-11T16:15:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2012/08/11/git-fundamentals-learning-notes-of-pro-git-part2</id>
    <content type="html"><![CDATA[<h2 id="branch">分支(BRANCH)</h2>

<p><span class="pullquote-right" data-pullquote="git中创建分支的操作就像移动指针那么简单，因为git分支的本质是指向commit对象的可变指针。"><br />
理解分支之前再来回顾一下前面所讲到的git与其他版本控制系统的区别<strong>“Git 保存的不是文件差异或者变化量,而只是一系列文件快照”</strong>。就是这个差别使得git分支的实现要比其他版本控制系统要轻松的多，git的分支是<em>“难以置信的轻量级”</em>，分支操作几乎在瞬间完成，而不像其他版本控制系统需要创建一个完整的源代码目录副本，对于大型项目来说需要耗费大量的项目时间。git中创建分支的操作就像移动指针那么简单，因为git分支的本质是指向commit对象的可变指针。      <br />
</span></p>

<p>下面我们介绍git分支的一般操作：  </p>

<h3 id="git-branch-branch-name">git branch &lt;branch-name&gt;</h3>
<p>从当前提交点创建一个新的分支<br />
git branch myBranch  </p>

<h3 id="git-checkout-branch-name">git checkout &lt;branch-name&gt;</h3>
<p>切换当前工作目录到某一分支，当你切换到分支时，git的HEAD指针就指向了你切换到的分支，这样里就能够在另外的分支里工作了，这里HEAD就是标志当前工作分支的一个指针。<br />
git checkout myBranch</p>

<p>有一个快捷的方式创建一个新分支并切换到该分支<br />
git checkout -b myBranch<br />
这条命令就相当于执行了上面两条命令。  </p>

<p>讲完基本的创建分支和检出分支操作之后，将介绍合并(merge)操作。  </p>

<h3 id="git">git中合并有两种方式：快进合并和三方合并</h3>

<p>1 快进合并(Fast Forward): 当你想要并入(merge in)的分支是并进(merge into)分支的直接下游时，git采用快进的合并方式，如：<br />
C0 &lt;&#8211; C1 &lt;&#8211; C2 &lt;&#8211; C3 &lt;&#8211; C4 <br />
                 |               |      <br />
               master           myBranch <br />
当我们打算将myBranch(merge in branch)并入master(merge into branch)分支时，由于myBranch是master的直接下游，git只需将指针直接右移到C4，这就相当于快进了。<br />
具体操作如下：<br />
	git checkout master #切换到master分区
	git meger myBranch #合并myBranch分区到master分区</p>

<p>2 三方合并(Recursive Merge): 当并入分区和并进分区不再是直接的上下游时，即出现了分叉，git将找出两者的共同祖先提交使用三方合并。</p>

<h3 id="section">合并冲突</h3>

<p>合并产生冲突时，git会提示产生冲突的文件，只有冲突解决之后，merge才能完成，实际上是用户手动处理冲突之后提交冲突文件。
<!-- more -->
##分支的管理</p>

<h3 id="git-branch">git branch</h3>

<p>不加任何参数，列出当前所有分支</p>

<h3 id="git-branch--v">git branch -v</h3>

<p>加参数 -v 列出所有分支，并且显示每一个分支最后一次commit的信息</p>

<h3 id="git-branch---merge">git branch –merge</h3>

<p>查看哪些分支已经被并入当前分支</p>

<h3 id="git-branch---no-merge">git branch –no-merge</h3>

<p>查看哪些分支没有并入当前分支</p>

<h3 id="git-branch--d-branch-name">git branch -d &lt;branch-name&gt;</h3>

<p>删除分支,但是当分支包含未被并入的工作时删除分支将导致失败，不过如果你坚信要删除该分支可以使用:<br />
git branch -D &lt;branch-name&gt;</p>

<h2 id="remote-branch">远程分支(Remote Branch)</h2>

<p>远程分支(remote branch)是对远程仓库状态的索引。它们是一些无法移动的本地分支;只有在进行 Git的网络活动时才会更新。远程分支就像是书签,提醒着你上次连接远程仓库时上面各分支的位置。 <br />
远程分支使用<strong>&lt;remote-repos-name&gt;/&lt;remote-branch-name&gt;</strong>来表示，例如常见的远程分支：<strong>origin/master</strong><br />
如果你没有和网络中远程分支进行通讯，本地的远程分支始终指向上一次通讯时的位置，并不能得到更新。进一步，当你的同事更新了远程分支，服务器中的远程分支将是你同事的版本，而你本地的远程分支并没有得到更新！当你需要推送(将在后面讲到)你的工作到服务器时，注意这是服务器中的版本已经发生了改变，你必须先拉取远程分支中的更新到你的本地分支，再进行推送操作。拉取操作我们前面讲过是git fetch &lt;remote-name&gt;。  </p>

<h3 id="push">推送(push)</h3>

<p>要想和其他人分享某个分支,你需要把它推送到一个你拥有写权限的远程仓库。<br />
git push &lt;remote-repos-name&gt; &lt;branch-name&gt;<br />
如果你有个叫funstaff的分支需要和他人一起开发,可以运行：<br />
git push origin funstaff  </p>

<p>这样当你的同伴想要合并你的funstaff分支到当前分支的话，可以使用：<br />
git merge origin/funstaff
或者新建一个分支，独立继续开发： <br />
git checkout -b myFunStaff origin/funstaff</p>

<h3 id="section-1">跟踪分支</h3>
<p>从远程分支检出的本地分支,称为跟踪分支(tracking branch)。在跟踪分支里输入这些分支里运行git push, Git会自行推断应该向哪个服务器的哪个分支推送数据。
上面的列子我们可以使用下面的命令：
git checkout –track origin/funstaff</p>

<h2 id="rebase">衍合(rebase)</h2>

<p>git checkout myBranch<br />
git rebase master<br />
<em>rebase命令,可以把在一个分支里提交的改变在另一个分支里重放一遍。</em><br />
衍合的金科玉律：</p>

<blockquote><p>永远不要衍合那些已经推送到公共仓库的更新。</p></blockquote>

<h2 id="references">References</h2>
<p><a href="http://git-scm.com/2010/06/09/pro-git-zh.html">Pro Git 简体中文版</a>  </p>

<p><a href="http://git-scm.com/book">Pro Git Enlish Edition</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Fundamentals: Learning Note of Pro Git]]></title>
    <link href="http://yoyzhou.github.io/blog/2012/08/09/git-fundamentals-learning-note-of-pro-git/"/>
    <updated>2012-08-09T22:30:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2012/08/09/git-fundamentals-learning-note-of-pro-git</id>
    <content type="html"><![CDATA[<h2 id="git">git基础</h2>

<h3 id="git-1">git优点</h3>
<pre><code>1 直接快照,而非比较差异
不像集中式版本管理系统那样只记录不同版本之间的Deta, 而是直接快照整个项目文件，这使得Git更像是一个文件系统

2 近乎所有操作都可本地执行

3 时刻保持数据完整性
通过数据内容校验和计算(checksum)

4 多数操作仅添加数据
</code></pre>

<h3 id="git-2">git配置文件的类型和位置</h3>

<pre><code>/etc/gitconfig 系统级别的git的配置文件 通过 git config --system 选项指定进行配置


～/.gitconfig 用户级别的配置文件 通过 git config --global 选项指定进行配置


.git/config(当前工作项目目录下) 项目级别的配置文件
</code></pre>

<h2 id="git-3">git命令</h2>

<h3 id="git-init">git init</h3>
<p>初始化git仓库</p>

<h3 id="git-status">git status</h3>
<p>查看git repos库状态<br />
status的形式:未跟踪，未修改，修改，暂存<br />
运行了git add之后又作了修订的文件,需要重新运行git add把最新版本重新暂存起来。</p>

<h4 id="git-4">演示git仓库中文件状态的例子</h4>
<pre><code>1.vim &lt;file&gt; -- untracked v0  
2.git add &lt;file&gt; -- tracked &amp; staged v0  
3.git commit -m '' -- version v0  
4.vim &lt;file&gt; -- tracked &amp; modified &amp; staged v0  
5.git add &lt;file&gt; -- tracked &amp; staged v1  
6.vim &lt;file&gt; -- tracked &amp; modified &amp; staged v1  
7.git commit -m '' -- version v1  
</code></pre>

<h3 id="git-diff">git diff</h3>
<p>–查看尚未暂存文件更新了什么，即查看工作目录中当前文件与暂存区快照之间的差异。用上面的例子来说，假设我们在第4步后面执行git diff, 这个命令查看的将是文件&lt;file&gt;在第4步[修改过但是还未暂存]与第3步[Staged v0]的差异  </p>

<h3 id="git-diff---cached--staged">git diff –cached/–staged</h3>
<p>查看已经暂存起来的文件和上次提交时的快照之间的差异。还是用上面的例子，假设我们在第7步后面执行命令git diff –staged，将查看文件&lt;file&gt;在第5步[Staged v1]和第3步[Version v0]之间的变化</p>

<h3 id="git-commit--m-message-for-commit">git commit -m ‘message for commit…’</h3>
<p>在之进行commit之前,一定要确认还有什么修改过的或新建的文件还没有git add过,否则提交的时候不会记录这些还没暂存起来的变化。所以,每次准备提交前,先用下,是不是都已暂存起来了,然后再运行提交命令git status看是不是都已经暂存起来了，然后再执行命令git commit。</p>

<h3 id="git-rm-file">git rm &lt;file&gt;</h3>
<p>Remove file(s) from git’s tracking list, meanwhile delete the file(s)</p>

<h3 id="git-rm---cached-file">git rm –cached &lt;file&gt;</h3>
<p>Remove file(s) from git’s tracking list, but keep file(s) as cached, file(s) will not be removed.</p>

<h3 id="git-mv-filefrom-fileto">git mv file_from file_to</h3>
<p>Move file in git repos, equals to:</p>

<pre><code>1 mv file_from file_to  
2 git rm file_from  
3 git add file_to  
</code></pre>

<h3 id="git-log--options">git log [-options]</h3>
<p>View commit history<br />
-p 展开每一次提交的diffs<br />
-n 仅显示最近n次提交<br />
–stat 显示每次提交的文件修改统计信息<br />
–pretty 指定显示格式，oneline、short、full、fuller和format(后面指定格式)<br />
–since 从什么时间开始<br />
etc. 更多选项请使用 git log –help</p>

<h3 id="git-commit---amend">git commit –amend</h3>
<p>进行重新提交操作，可修改上一次提交的commit comment或者添加忘记staged的更新</p>

<h3 id="git-reset-head-file">git reset HEAD &lt;file&gt;</h3>
<p>撤销对文件&lt;file&gt;的暂存操作，比如你需要对某一个文件进行单独提交时，可以：<br />
	git add . #将所有的文件暂存<br />
	git reset HEAD &lt;file&gt; #撤销对某文件的暂存<br />
	git commit -m ‘commit message’<br />
	git add &lt;file&gt;<br />
	[可能的文件&lt;file&gt;的修改]<br />
	git commit &lt;file&gt; -m ‘commit &lt;file&gt; seperately’  </p>

<h3 id="git-checkout---file">git checkout –&lt;file&gt;</h3>
<p>取消对文件的修改，慎用。此命令将文件恢复到文件修改前的版本/暂存区内容，工作目录中所有对该文件的修改都将丢失。<br />
在git 1.7.9.5中测试可省略“–”直接使用git checkout &lt;file&gt;</p>

<h2 id="git-5">git远程仓库</h2>

<h3 id="git-remote--v">git remote -v</h3>
<p>查看远程库信息 -v选项显示远程库地址<br />
<!-- MORE --></p>

<h3 id="git-remote-add-options-short-name-git-url">git remote add [&lt;options&gt;] &lt;short name&gt; &lt;git url&gt;</h3>

<p>添加一个远程库, &lt;short name&gt; 可以为远程库选一个简短的名字; &lt;git url&gt;远程库的git项目URL, e.g. <br />
	git remote add pb git://github.com/paulboone/ticgit.git    </p>

<h3 id="git-fetch-remote-name">git fetch [remote-name]</h3>
<p>从远程仓库抓取数据，e.g.:
	 git fetch pb #命令会到远程仓库pb中拉取所有你本地仓库中还没有的数据。<br />
注：当你使用 git clone命令克隆一个远程库时，默认会创建一个origin的remote repository，当使用 git fetch origin 实际上是拉取从你上一次clone以来别人传到此远程仓库的所有更新<br />
NOTE：fetch 命令只是将远端的数据拉到本地仓库,并不自动合并到当前工作分支,只有当你确实准备好了,才能手工合并。  </p>

<h3 id="git-push-remote-name-branch-name">git push [remote-name] [branch-name]</h3>
<p>推送数据到远程仓库<br />
[remote-name] 为远程仓库名称，origin或者你使用git remote add 命令添加的远程仓库<br />
[branch-name] 本地分支名称, e.g. <br />
	git push origin master #将本地的master分支推送到origin服务器上  </p>

<h3 id="git-remote-show-remote-name">git remote show &lt;remote-name&gt;</h3>
<p>查看远程仓库的信息, e.g.<br />
	git remote show origin  </p>

<h3 id="git-remote-rename-old-remote-name-new-remote-name">git remote rename &lt;old-remote-name&gt; &lt;new-remote-name&gt;</h3>
<p>重命名远程仓库名称</p>

<h3 id="git-remote-rm-remote-name">git remote rm &lt;remote-name&gt;</h3>
<p>删除远程仓库</p>

<h2 id="git-6">git标签</h2>

<h3 id="git-tag">git tag</h3>
<p>显示当前项目中的所有标签</p>

<h3 id="git-tab--l-expression">git tab -l ‘&lt;expression&gt;’</h3>
<p>显示符合检索表达式的标签，e.g.
git tag -l ‘v1.0.*’</p>

<h3 id="git-tag--a-tag-name--m-tag-message">git tag -a &lt;tag-name&gt; -m ‘tag message’</h3>
<p>新建一个含附注的(annotated)标签, e.g.<br />
git tag -a v1.0.1 -m ‘version 1.0.1’  </p>

<h3 id="git-tag--a-tag-name-checksum">git tag -a &lt;tag-name&gt; &lt;checksum&gt;</h3>
<p>为某一次提交补上标签，提交的检验和可以使用前面的git log进行查看</p>

<h3 id="git-show-tag-name">git show &lt;tag-name&gt;</h3>
<p>显示标签信息<br />
git show v1.0.1</p>

<h3 id="git-push-remote-name-tag-name">git push [remote-name] &lt;tag-name&gt;</h3>
<p>推送/分享某一个标签版本，而不是本地分支<br />
git push origin v1.0.1  </p>

<h2 id="git-">git 使用技巧</h2>

<h3 id="tab">添加tab自动补全功能</h3>
<pre><code>1 clone git源码库  
	git clone git://github.com/git/git.git  
2 cp contrib/completion/git-completion.bash ~/.git-completion.bash  
3 source ~/.git-completion.bash #添加.git-completion.bash到你的.bashrc文件中。
</code></pre>

<p>如果你不想克隆git源码库可以直接从git源码库中下载单个<a href="https://raw.github.com/git/git/master/contrib/completion/git-completion.bash">git-completion.bash</a>文件,再进行复制和source操作。</p>

<h3 id="git-7">添加git命令别名</h3>
<p>e.g.</p>

<pre><code>git config --global alias.co checkout 
git config --global alias.st status  etc.
</code></pre>

<h2 id="references">References</h2>
<p><a href="http://git-scm.com/2010/06/09/pro-git-zh.html">Pro Git 简体中文版</a>  </p>

<p><a href="http://git-scm.com/book">Pro Git Enlish Edition</a></p>

<p>&lt;To be continued…&gt;</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用kramdown和MathJax给博客添加Latex支持]]></title>
    <link href="http://yoyzhou.github.io/blog/2012/08/05/add-latex-support-for-octopress/"/>
    <updated>2012-08-05T15:24:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2012/08/05/add-latex-support-for-octopress</id>
    <content type="html"><![CDATA[<blockquote><p>kramdown (sic, not Kramdown or KramDown, just kramdown) is a free GPL-licensed Ruby library for parsing and converting a superset of Markdown.  It is completely written in Ruby, supports standard Markdown.</p><footer><strong>@kramdown</strong> <cite><a href="http://kramdown.rubyforge.org/index.html">kramdown.rubyforge.org/&hellip;</a></cite></footer></blockquote>

<h2 id="install-kramdown">Install kramdown</h2>
<p>First of all make sure you have ruby installed on your box:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ruby --version # or
</span><span class="line">$ which ruby</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If command &#8220;which ruby&#8221; returns nothing, then you should install it first.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo apt-cache search ruby # to chech out the available ruby package
</span><span class="line">$ sudo apt-get install ruby[*.*] # to install *.* version of ruby</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Also you can use <a href="https://rvm.io/">RVM</a>, aka Ruby Version Manager, to install/manage your ruby entries, but actually I am not able to install ruby 1.9.2 approperately following the instruction from Octopress site on my PC which is <em>ubuntu 12.04</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Install kramdown </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>sudo gem install kramdown
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="change-configyml-and-gemfile-to-include-kramdown">Change _config.yml and Gemfile to include kramdown</h2>
<p>Change markdown engine to kramdown</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Change markdown engine to kramdown _config.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="p-Indicator">[</span><span class="nv">...</span><span class="p-Indicator">]</span>
</span><span class="line"><span class="l-Scalar-Plain">markdown</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kramdown</span>
</span><span class="line"><span class="p-Indicator">[</span><span class="nv">...</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more -->
<p>Add kramdown to Gemfile</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Add kramdown to Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[...]
</span><span class="line">gem 'pygments.rb', '~&gt; 0.2.12'
</span><span class="line">gem 'kramdown', '~&gt; 0.13'
</span><span class="line">gem 'RedCloth', '~&gt; 4.2.9'
</span><span class="line">[...]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, install gem dependencies</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">gem install bundler
</span><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="add-mathjaxjs-to-headhtml">Add MathJax.js to head.html</h2>
<p>So far, we have installed kramdown, and attach the dependency of kramdown to project, the last thing we have to do is including MathJax.js to your html head, since by default MathJax.js is not included in html head.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Add MathJax </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>vim <span class="o">[</span>repo-root<span class="o">]</span>/source/_includes/head.html <span class="c">#where repo-root is the repository root, optional. </span>
</span><span class="line"><span class="nv">$ </span><span class="c">#add &quot;&lt;script src=&quot;http://kramdown.rubyforge.org/MathJax/MathJax.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&quot; (without quote) to head.html </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>## Show Cases
<script type="math/tex">% &lt;![CDATA[

\begin{align}
E & = mc^2 
\end{align}
 %]]&gt;</script></p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
F & = ma 
\end{align}
 %]]&gt;</script>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
e^{i \pi} & = -1
\end{align}
 %]]&gt;</script>

<p>And,</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome]]></title>
    <link href="http://yoyzhou.github.io/blog/2012/08/02/welcome/"/>
    <updated>2012-08-02T22:44:00-07:00</updated>
    <id>http://yoyzhou.github.io/blog/2012/08/02/welcome</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
